<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/12/hello-world/"/>
      <url>/2019/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> bash </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bbb</title>
      <link href="/2019/10/12/bbb/"/>
      <url>/2019/10/12/bbb/</url>
      
        <content type="html"><![CDATA[<p>据库为了维护事务的几种性质，尤其是一致性和隔离性，一般使用加锁这种方式。同时数据库又是个高并发的应用，同一时间会有大量的并发访问，如果加锁过度，会极大的降低并发处理能力。所以对于加锁的处理，可以说就是数据库对于事务处理的精髓所在。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> NOSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
            <tag> Solr </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aaa.md</title>
      <link href="/2019/10/12/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/10/12/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><strong><em>二叉搜索树实现了以下功能<br>1.计算二叉搜索树的大小<br>2.前中后递归遍历二叉搜索树<br>3.前中后非递归遍历二叉搜索树<br>4.层序遍历二叉搜索树<br>5.二叉搜索树叶子个数<br>6.二叉搜索树的深度<br>7.二叉搜索树的结点的度<br>8.二叉搜索树的双亲以及左右子女的查找<br>9.查找某一节点<br>10.插入新的结点<br>11.删除某一节点<br>12.判断是否为平衡树</em></strong><br><img src="https://img-blog.csdnimg.cn/20191030231545417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="定义一个结点结构体"><a href="#定义一个结点结构体" class="headerlink" title="定义一个结点结构体"></a>定义一个结点结构体</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义二叉搜索树的节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  BinaryTreeNode &lt;T&gt;* _left;</span><br><span class="line">  BinaryTreeNode &lt;T&gt;* _right;</span><br><span class="line">  T _data;</span><br><span class="line">  BinaryTreeNode(T &amp;data)</span><br><span class="line">    :_left(<span class="literal">NULL</span>)</span><br><span class="line">    ,_right(<span class="literal">NULL</span>)</span><br><span class="line">    ,_data(data)</span><br><span class="line">  &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="封装的相关函数"><a href="#封装的相关函数" class="headerlink" title="封装的相关函数"></a>封装的相关函数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* _root;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//无参的构造函数</span></span><br><span class="line">    BinarySearchTree()</span><br><span class="line">    :_root(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    BinarySearchTree(<span class="built_in">vector</span>&lt;T&gt; v)</span><br><span class="line">    &#123;</span><br><span class="line">      _root=<span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">      &#123;</span><br><span class="line">        insert(_root,v[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//复制构造函数</span></span><br><span class="line">    BinarySearchTree(<span class="keyword">const</span> BinarySearchTree&lt;T&gt; &amp;s)</span><br><span class="line">    &#123;_root=CopyBintTree(s.GetRoot());&#125;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* GetRoot()</span><br><span class="line">    &#123;<span class="keyword">return</span>  <span class="keyword">this</span>-&gt;_root;&#125;</span><br><span class="line">    <span class="comment">//递归先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrevOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//递归中序遍历二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//递归后续遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//层序遍历二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Leve1Order</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//二叉搜索树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//递归求二叉搜索树叶子节点的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LeafSize</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//求节点的度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DegreeofNode</span><span class="params">(T tmp)</span></span>;</span><br><span class="line">    <span class="comment">//求节点的层次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(BinaryTreeNode&lt;T&gt;* root,<span class="keyword">int</span> val,<span class="keyword">int</span> &amp;ans,<span class="keyword">int</span> lev)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLevelofNode</span><span class="params">(T tmp)</span></span>;</span><br><span class="line">    <span class="comment">//二叉搜索树的复制</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* CopyBintTree(BinaryTreeNode&lt;T&gt;* originNode);</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的双亲</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentofNode</span><span class="params">(BinaryTreeNode&lt;T&gt;* r,T data)</span></span>;</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的左子女</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* LeftChildofNode(T tmp);</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的右子女</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* RightChildofNode(T tmp);</span><br><span class="line">    <span class="comment">//查找某一个结点</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* FindNode(T tmp,BinaryTreeNode&lt;T&gt;* &amp;root);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(BinaryTreeNode&lt;T&gt;* &amp;root, T val)</span></span>;<span class="comment">//二叉搜索树的插入一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(T val)</span></span>;<span class="comment">//删除某一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(T x)</span></span>;<span class="comment">//二叉搜索树的搜索</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt; * Remove(BinaryTreeNode&lt;T&gt; * &amp;root,T val);<span class="comment">//二叉搜索树的删除结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(BinaryTreeNode&lt;T&gt; * &amp;root)</span></span>;<span class="comment">//判断是否为平衡二叉树</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="各个函数的实现"><a href="#各个函数的实现" class="headerlink" title="各个函数的实现"></a>各个函数的实现</h3><h4 id="前中后序遍历的递归实现"><a href="#前中后序遍历的递归实现" class="headerlink" title="前中后序遍历的递归实现"></a>前中后序遍历的递归实现</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PrevOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;root-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  PrevOrder(root-&gt;_left );</span><br><span class="line">  PrevOrder(root-&gt;_right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:InOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  InOrder(root-&gt;_left );</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;root-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  InOrder(root-&gt;_right );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PostOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    PostOrder(root-&gt;_left);</span><br><span class="line">    PostOrder(root-&gt;_right);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;root-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="前中后序遍历的非递归实现"><a href="#前中后序遍历的非递归实现" class="headerlink" title="前中后序遍历的非递归实现"></a>前中后序遍历的非递归实现</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PrevOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  <span class="keyword">while</span>(cur||!s.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(cur)</span><br><span class="line">    &#123;<span class="comment">//先将左子树遍历输出后压栈</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cur-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    s.push(cur);</span><br><span class="line">    cur=cur-&gt;_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//当左子树为空时开始访问右子树</span></span><br><span class="line">    cur=s.top ();</span><br><span class="line">    s.pop();</span><br><span class="line">    cur=cur-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:InOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">    <span class="keyword">while</span>(cur||!s.empty())<span class="comment">//cur非空或者栈非空</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(cur)</span><br><span class="line">      &#123;</span><br><span class="line">        s.push(cur);<span class="comment">//根节点进栈遍历左子树</span></span><br><span class="line">        cur=cur-&gt;_left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt;* top=s.top();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;top-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">        cur=top-&gt;_right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PostOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* prev=<span class="literal">NULL</span>;<span class="comment">//设置标志域</span></span><br><span class="line">  s.push(_root);</span><br><span class="line">  <span class="keyword">while</span>(!s.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    cur=s.top();</span><br><span class="line">    <span class="keyword">if</span>((cur-&gt;_left ==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right ==<span class="literal">NULL</span>)</span><br><span class="line">      ||(prev!=<span class="literal">NULL</span>&amp;&amp;(prev==cur-&gt;_left ||prev ==cur-&gt;_right )))</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;cur-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">      prev=cur;</span><br><span class="line">      s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">      s.push(cur-&gt;_right);</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)</span><br><span class="line">      s.push(cur-&gt;_left); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="层序遍历二叉树"><a href="#层序遍历二叉树" class="headerlink" title="层序遍历二叉树"></a>层序遍历二叉树</h4><p> 按层次顺序访问二叉树的处理需要利用一个队列。<br>在访问二又树的某一层结点时，把下一层结点指针预先<br>记忆在队列中，利用队列安排逐层访问的次序。因此，每<br>当访问一个结点时，将它的子女依次加到队列的队尾，然<br>后再访问已在队列队头的结点。这样可以实现二叉树结<br>点的按层访问 </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Leve1Order()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* front=q.front();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;front-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span>(front-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(front-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(front-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的大小"><a href="#求树的大小" class="headerlink" title="求树的大小"></a>求树的大小</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Size(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> Ssize=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ++Ssize;</span><br><span class="line">  Size(root-&gt;_left);</span><br><span class="line">  Size(root-&gt;_right);</span><br><span class="line">  <span class="keyword">return</span> Ssize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的深度"><a href="#求树的深度" class="headerlink" title="求树的深度"></a>求树的深度</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Depth(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> left=Depth(root-&gt;_left )+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">size_t</span> right=Depth(root-&gt;_right)+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (left&gt;right)?left:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的叶子个数"><a href="#求树的叶子个数" class="headerlink" title="求树的叶子个数"></a>求树的叶子个数</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:LeafSize(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(root-&gt;_left  ==<span class="literal">NULL</span>&amp;&amp;root-&gt;_right ==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> LeafSize(root-&gt;_left )+LeafSize(root-&gt;_right );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的各个结点的度"><a href="#求树的各个结点的度" class="headerlink" title="求树的各个结点的度"></a>求树的各个结点的度</h4><p>利用二叉树的层次遍历方法来统计各个节点的度</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:DegreeofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">    <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      q.push(_root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">      BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_data==tmp)&#123;</span><br><span class="line">        <span class="keyword">if</span>((cur-&gt;_left==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right!=<span class="literal">NULL</span>)||(cur-&gt;_left!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right==<span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_left==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q.push(cur-&gt;_left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">      q.push(cur-&gt;_right);</span><br><span class="line">      q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="复制搜索二叉树"><a href="#复制搜索二叉树" class="headerlink" title="复制搜索二叉树"></a>复制搜索二叉树</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:CopyBintTree(BinaryTreeNode&lt;T&gt;* originNode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(originNode==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* temp=<span class="keyword">new</span> BinaryTreeNode&lt;T&gt;;</span><br><span class="line">  temp-&gt;_data=originNode-&gt;_data;</span><br><span class="line">  temp-&gt;_left=CopyBintTree(originNode-&gt;_left);</span><br><span class="line">  temp-&gt;_right=CopyBintTree(originNode-&gt;_right);</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求某一结点的双亲及左右子女"><a href="#求某一结点的双亲及左右子女" class="headerlink" title="求某一结点的双亲及左右子女"></a>求某一结点的双亲及左右子女</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:ParentofNode(BinaryTreeNode&lt;T&gt;* r,T data)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(r ==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(r-&gt;_left != <span class="literal">NULL</span>)<span class="comment">//当左孩子存在的时候才进行判断，否则程序出错</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;_left-&gt;_data == data)&#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"这个节点的双亲结点是:"</span>&lt;&lt;r-&gt;_data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(r-&gt;_right != <span class="literal">NULL</span>)<span class="comment">//如左子树所示</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;_right-&gt;_data == data)    </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"这个节点的双亲结点是:"</span>&lt;&lt;r-&gt;_data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ParentofNode(r-&gt;_left,data);</span><br><span class="line">  ParentofNode(r-&gt;_right,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>: LeftChildofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_data==tmp&amp;&amp;cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> cur-&gt;_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(cur-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(cur-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:RightChildofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_data==tmp&amp;&amp;cur-&gt;_right!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> cur-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(cur-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(cur-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求某一结点的层次"><a href="#求某一结点的层次" class="headerlink" title="求某一结点的层次"></a>求某一结点的层次</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:level(BinaryTreeNode&lt;T&gt;* root,<span class="keyword">int</span> val,<span class="keyword">int</span> &amp;ans,<span class="keyword">int</span> lev)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span>==root)</span><br><span class="line">    ans=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_data==val)</span><br><span class="line">    ans=lev;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    level(root-&gt;_left,val,ans,lev+<span class="number">1</span>);<span class="comment">//在左子树中查找</span></span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line">      level(root-&gt;_right,val,ans,lev+<span class="number">1</span>);<span class="comment">//在右子树中查找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:GetLevelofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> res=<span class="number">-1</span>;</span><br><span class="line">  level(_root,tmp,res,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="查找搜索某一个结点"><a href="#查找搜索某一个结点" class="headerlink" title="查找搜索某一个结点"></a>查找搜索某一个结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span>  <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:FindNode(T tmp,BinaryTreeNode&lt;T&gt;* &amp;root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;root-&gt;_data)&#123;</span><br><span class="line">    <span class="keyword">return</span> FindNode(tmp,root-&gt;_left);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tmp&gt;root-&gt;_data)&#123;</span><br><span class="line">      <span class="keyword">return</span> FindNode(tmp,root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Search(T x)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;FindNode(x,_root)==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="插入一个新的结点"><a href="#插入一个新的结点" class="headerlink" title="插入一个新的结点"></a>插入一个新的结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:insert(BinaryTreeNode&lt;T&gt;* &amp;root, T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    root=<span class="keyword">new</span> BinaryTreeNode&lt;T&gt;(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(val&lt;root-&gt;_data)&#123;</span><br><span class="line">    insert(root-&gt;_left,val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;root-&gt;_data)&#123;</span><br><span class="line">      insert(root-&gt;_right,val);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt; * <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Remove(BinaryTreeNode&lt;T&gt; * &amp;root,T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;_data &gt; val)</span><br><span class="line">      root-&gt;_left = Remove(root-&gt;_left, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_data &lt; val)</span><br><span class="line">      root-&gt;_right = Remove(root-&gt;_right, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (root-&gt;_left == <span class="literal">NULL</span>&amp;&amp;root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_left == <span class="literal">NULL</span>)</span><br><span class="line">        root = root-&gt;_right;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        root = root-&gt;_left;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt; *minnode = root-&gt;_right;</span><br><span class="line">        <span class="keyword">while</span> (minnode-&gt;_left != <span class="literal">NULL</span>)</span><br><span class="line">          minnode = minnode-&gt;_left;</span><br><span class="line">        root-&gt;_data = minnode-&gt;_data;</span><br><span class="line">        root-&gt;_right = Remove(root-&gt;_right, minnode-&gt;_data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Delete(T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!Search(val))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  Remove(_root, val);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="是否为平衡树"><a href="#是否为平衡树" class="headerlink" title="是否为平衡树"></a>是否为平衡树</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:isBalanced(BinaryTreeNode&lt;T&gt; * &amp;root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (!root-&gt;_left &amp;&amp; !root-&gt;_right)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(Size(root-&gt;_left) - Size(root-&gt;_right)) &gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> isBalanced(root-&gt;_left) &amp;&amp; isBalanced(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！"><a href="#每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！" class="headerlink" title="每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！"></a>每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！</h5><p><a href="https://github.com/xjh199923/BinarySearchTree.git" target="_blank" rel="noopener">项目源代码传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> 类模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
