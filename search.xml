<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>选择排序</title>
      <link href="/posts/51203.html"/>
      <url>/posts/51203.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>排序算法之选择排序,选择排序，选择排序的基本思想描述为：每一趟在n-i+1(i=1,2,…,n-1)个记录中选取关键字最小的记录作为有序序列中第i个记录。具体来说，假设长度为n的数组arr，要按照从小到大排序，那么先从n个数字中找到最小值min1，如果最小值min1的位置不在数组的最左端(也就是min1不等于arr[0])，则将最小值min1和arr[0]交换，接着在剩下的n-1个数字中找到最小值min2，如果最小值min2不等于arr[1]，则交换这两个数字，依次类推，直到数组arr有序排列。</p><a id="more"></a><div class="note info"><p>算法过程</p><p>举个栗子（第一趟的排序过程）</p><p>原始序列：3、44、38、5、47、15、36、 26、27、2、46、4、19、50、48</p><p>1）在进行选择排序过程中分成有序和无序两个部分，开始都是无序序列</p><p>结果：3、44、38、5、47、15、36、 26、27、2、46、4、19、50、48</p><p>2）从无序序列中取出最小的元素2，将2同无序序列第一个元素交换，此时产生仅含一个元素的有序序列，无序序列减一</p><p>结果：{2、} {44、38、5、47、15、36、 26、27、3、46、4、19、50、48</p><p>3）从无序序列中取出最小的元素3，将3同无序序列第一个元素交换，此时产生仅两个元素的有序序列，无序序列减一</p><p>结果：{2、3、} {38、5、47、15、36、 26、27、44、46、4、19、50、48}</p><p>4）从无序序列中取出最小的元素4，将4同无序序列第一个元素交换，此时产生含三个元素的有序序列，无序序列减一</p><p>结果：{2、3、4、} {5、47、15、36、 26、27、44、46、38、19、50、48}</p><p>5）从无序序列中取出最小的元素5，5此时是无序序列最小的，不用交换</p><p>结果：{2、3、4、5、} {47、15、36、 26、27、44、46、38、19、50、48}</p><p>6）从无序序列中取出最小的元素15，将15同无序序列第一个元素交换，此时产生含五个元素的有序序列，无序序列减一</p><p>结果：{2、3、4、5、15、} {47、36、 26、27、44、46、38、19、50、48}</p><p>7）依次重复上述操作，直到无序序列只有最后一个元素</p><p>8）最后一个元素50肯定是最大元素，无序排序直接生产一个有序的序列</p><p>结果：{2、3、4、5、19、26、27、36、38、44、46、47、48、50}</p><p>最后如果还没有理解这个过程的话，小编放上一个动图，让大家更深入的理解这个过程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzExLzEyL00zMlFUeC5naWY" alt="插入排序动态分析图"></p></div><h2 id="接下来分析完了选择排序的算法，我们就到了分享代码的这个激动人心的时刻了："><a href="#接下来分析完了选择排序的算法，我们就到了分享代码的这个激动人心的时刻了：" class="headerlink" title="接下来分析完了选择排序的算法，我们就到了分享代码的这个激动人心的时刻了："></a>接下来分析完了选择排序的算法，我们就到了分享代码的这个激动人心的时刻了：</h2><h3 id="选择排序C-实现代码："><a href="#选择排序C-实现代码：" class="headerlink" title="选择排序C++实现代码："></a>选择排序C++实现代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NUM=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];<span class="comment">//定义一个产生数组储存100个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; randsample=get_random(<span class="number">100</span>,MAX_NUM);<span class="comment">//产生100个0-MAZX_NUM的随机数,每次产生的随机数不一样</span></span><br><span class="line">  <span class="keyword">int</span> size=randsample.size();</span><br><span class="line">  <span class="comment">//输出最开始时未排序时的顺序:</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"随机数的顺序："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;randsample[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">clock_t</span> start,finish;<span class="comment">//定义一个测量一段程序运行时间的前后值</span></span><br><span class="line">  <span class="keyword">double</span> totaltime;<span class="comment">//总的运行时间</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//测试选择排序</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"执行选择排序后:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    data[i]=randsample[i];</span><br><span class="line">  &#125;</span><br><span class="line">  start=clock();</span><br><span class="line">  SelectSort(size);</span><br><span class="line">  finish=clock();</span><br><span class="line">  output(size);</span><br><span class="line">  totaltime=(<span class="keyword">double</span>)(finish-start)/CLOCKS_PER_SEC;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"运行时间："</span>&lt;&lt;totaltime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生随机数的函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(N);<span class="comment">//N代表初始状态分配的空间大小</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out_vec;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    vec[i]=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> rand_value=rand()%N;</span><br><span class="line">    out_vec.push_back(vec[rand_value]);</span><br><span class="line">    vec[rand_value]=vec[N<span class="number">-1</span>];<span class="comment">//将数组vec的元素</span></span><br><span class="line">    N--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out_vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line">  <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> k=i;<span class="comment">//在data[i]到data[n-1]找最小排序码元素</span></span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(data[j]&lt;data[k])&#123;</span><br><span class="line">        count++;<span class="comment">//当前具有最小排序码的元素</span></span><br><span class="line">        k=j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=i)</span><br><span class="line">    Swap(i,k);<span class="comment">//交换</span></span><br><span class="line">    count1++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"比较次数: "</span>&lt;&lt;count&lt;&lt;<span class="string">"  移动次数:  "</span>&lt;&lt;count1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tem;</span><br><span class="line">  tem = data[j];</span><br><span class="line">  data[j]= data[i];</span><br><span class="line">  data[i] = tem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://imgchr.com/i/M88llD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/12/M88llD.md.png" alt="M88llD.md.png"></a></p><h3 id="选择排序Java代码实现"><a href="#选择排序Java代码实现" class="headerlink" title="选择排序Java代码实现"></a>选择排序Java代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object []arr = getRandomNumList(<span class="number">100</span>,<span class="number">0</span>,<span class="number">10000</span>).toArray();</span><br><span class="line">    <span class="keyword">int</span>[] ins = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>] ;</span><br><span class="line">    System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      String s=arr[i].toString();</span><br><span class="line">      ins[i]= Integer.parseInt( s );</span><br><span class="line">      System.out.println(ins[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">    <span class="keyword">int</span>[] ins2 = selectsort(ins);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      System.out.println(ins2[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectsort(<span class="keyword">int</span>[] data)&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> n = data.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> k=i;<span class="comment">//在data[i]到data[n-1]找最小排序码元素</span></span><br><span class="line">      <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[j]&lt;data[k])&#123;<span class="comment">//当前具有最小排序码的元素</span></span><br><span class="line">          k=j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(k!=i)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">int</span> tem;</span><br><span class="line">        tem=data[k];</span><br><span class="line">        data[k]=data[i];</span><br><span class="line">        data[i]=tem;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//定义生成随机数并且装入集合容器的方法</span></span><br><span class="line">    <span class="comment">//方法的形参列表分别为：生成随机数的个数、生成随机数的值的范围最小值为start(包含start)、值得范围最大值为end(不包含end)  可取值范围可表示为[start,end)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getRandomNumList</span><span class="params">(<span class="keyword">int</span> nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合容器对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//循环将得到的随机数进行判断，如果随机数不存在于集合中，则将随机数放入集合中，如果存在，则将随机数丢弃不做操作，进行下一次循环，直到集合长度等于nums</span></span><br><span class="line">        <span class="keyword">while</span>(list.size() != nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(end-start) + start;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(num))&#123;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="选择排序Python代码实现"><a href="#选择排序Python代码实现" class="headerlink" title="选择排序Python代码实现"></a>选择排序Python代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>):</span><br><span class="line">        minIndex = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j+<span class="number">1</span>,len(arr),<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; arr[minIndex]):</span><br><span class="line">                minIndex = i</span><br><span class="line">        arr[j],arr[minIndex] = arr[minIndex],arr[j]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    arr =[]</span><br><span class="line">    <span class="keyword">while</span>(len(arr)&lt;<span class="number">100</span>):</span><br><span class="line">        x=random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> arr:</span><br><span class="line">            arr.append(x)</span><br><span class="line">    sort(arr)</span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><div class="note info"><p>直接选择排序的排序码比较次数KCN与元素的初始排列无关。第i趟选择具有最小排序码元素所需的比较次数总是n-i-1次，此处假定整个待排序元素序列有n个元素。因此，总的排序码比较次数为:</p><p>$\displaystyle KCN=\sum_{i=0}^{n-2}{(n-i-1)}$=n*(n-1)/2</p><p>元素的移动次数与元素序列的初始排列有关。当这组元素的初始状态是按其排序码从小到大有序的时候，元素的移动次数RMN=0，达到最少；而最坏情况是每一趟都要进行交换，总的元素移动次数为RMN=3（n一1)。它对一类重要的元素序列具有较好的效率，这就是元素规模很大，而排序码却比较小的序列。因为对这种的序列进行排序，移动操作所花费的时间要比比较操作的时间大得多，而其他算法移动操作所花费的时间要比比较操作的时间大的多，而其他算法移动操作次数都要比选择排序来得多。直接选择排序是一种不稳定的排序方法。</p></div><div class="note success"><p><strong><font color="#5cb85c">继续加油!</font></strong></p><p>以上就是本次给大家分享的选择排序的几种实现,如果有什么不足之处欢迎大家指出，留言，互相学习，共同进步。花了几个小时整理，希望得到大家的支持,你的支持就是我前进的动力,下面我会持续更新其他的排序算法，敬请期待！</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
          <category> Java </category>
          
          <category> Python </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的链式存储结构</title>
      <link href="/posts/10528.html"/>
      <url>/posts/10528.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><h1 id="C-实现线性表的链式存储结构："><a href="#C-实现线性表的链式存储结构：" class="headerlink" title="C++实现线性表的链式存储结构："></a>C++实现线性表的链式存储结构：</h1><p>对链式存储结构的线性表进行一些基本操作。主要包括：<br>（1）插入：操作方式为在指定元素前插入、在指定元素之后插入、在指定位置完成插入<br>（2）删除：操作方式可分为删除指定元素、删除指定位置的元素，删除第一个元素，删除最后一个元素<br>（3）显示数据<br>（4）查找：查询指定的元素（可根据某个数据成员完成查询操作）<br>（5）定位操作：定位指定元素的序号<br>（6）更新：修改指定元素的数据<br>（7）数据文件的读写操作<br>（8）计算链表的长度<br><img src="https://img-blog.csdnimg.cn/20190920120609137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="这是测试函数写的一个大概功能展示"></p><a id="more"></a><h3 id="定义一个结点类"><a href="#定义一个结点类" class="headerlink" title="定义一个结点类"></a>定义一个结点类</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*Define a friend class to facilitate direct manipulation of data*/</span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">class LinkList;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">class LinkNode</span><br><span class="line">&#123;</span><br><span class="line">friend class LinkList&lt;T&gt;;</span><br><span class="line">private:</span><br><span class="line">T _data;</span><br><span class="line">LinkNode&lt;T&gt;  *_next;</span><br><span class="line">public:</span><br><span class="line">LinkNode(T x ) </span><br><span class="line">&#123;</span><br><span class="line">_data = x;</span><br><span class="line">_next = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="链表的主要函数构成"><a href="#链表的主要函数构成" class="headerlink" title="链表的主要函数构成"></a>链表的主要函数构成</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">class LinkList</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">LinkNode&lt;T&gt; * _head;</span><br><span class="line">public:</span><br><span class="line">LinkList()</span><br><span class="line">&#123;_head = NULL;&#125;</span><br><span class="line">LinkNode&lt;T&gt;* _CreateNode(const T&amp; x);//Create a new node</span><br><span class="line">void clear(LinkNode&lt;T&gt;* &amp;cur);//Delete a new node</span><br><span class="line">void PushBack(const T&amp; x);//tail insertion to create a linked list</span><br><span class="line">void PushFront(const T&amp; x);//Head insertion to create a linked list</span><br><span class="line">void PopBack();//Remove an element from the tail</span><br><span class="line">void PopFront();//Remove an element from the head</span><br><span class="line">int Length();//Find the length of the linear table</span><br><span class="line">LinkNode&lt;T&gt;* Find(T x);//Find a number</span><br><span class="line">void Insert_right(int pos, const T&amp; x);//Insert after the nth</span><br><span class="line">void Insert_cur(int pos, const T&amp; x);//Insert at the specified location</span><br><span class="line">void Insert_left(int pos, const T&amp; x);//Insert in front of the nth</span><br><span class="line">void Delete_pos(int pos);//Delete the nth element</span><br><span class="line">void Delete_val(const T&amp; x);//Delete specified element</span><br><span class="line">void reset(const T &amp;x,const T &amp;y);//Update an element</span><br><span class="line">int located(const T &amp;x);//Locate the serial number of the specified element</span><br><span class="line">void Print();// Print linear table</span><br><span class="line">bool writeToFile();//Write file</span><br><span class="line">T* readFromFile();//Read in data file</span><br><span class="line">int readlen();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2 id="各个函数的实现"><a href="#各个函数的实现" class="headerlink" title="各个函数的实现"></a>各个函数的实现</h2><h3 id="Print-函数"><a href="#Print-函数" class="headerlink" title="Print()函数"></a>Print()函数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt;::Print()</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt;  *tmp = _head;</span><br><span class="line">while (tmp != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; tmp-&gt;_data &lt;&lt; &quot;--&gt;&quot;;</span><br><span class="line">tmp = tmp-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;NULL&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="创建一个新的结点，并为其分配空间"><a href="#创建一个新的结点，并为其分配空间" class="headerlink" title="创建一个新的结点，并为其分配空间"></a>创建一个新的结点，并为其分配空间</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">LinkNode&lt;T&gt;* LinkList&lt;T&gt;:: _CreateNode(const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt;* tmp = new LinkNode&lt;T&gt;(x);</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="清除某一个节点，释放空间"><a href="#清除某一个节点，释放空间" class="headerlink" title="清除某一个节点，释放空间"></a>清除某一个节点，释放空间</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt;::clear(LinkNode&lt;T&gt; *&amp;cur)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;_next = NULL;</span><br><span class="line">delete  cur;</span><br><span class="line">cur = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="获得链表的长度"><a href="#获得链表的长度" class="headerlink" title="获得链表的长度"></a>获得链表的长度</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">int LinkList&lt;T&gt; ::Length()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int len = readlen();/*调用一个读文件的函数，来判别链表状态，Call a function that reads the file to determine the state of the linked list*/</span><br><span class="line">if(len&gt;0)&#123;</span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">len=0;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * begin = _head;</span><br><span class="line">while (begin != NULL)</span><br><span class="line">&#123;</span><br><span class="line">begin = begin-&gt;_next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="前插法建立链表"><a href="#前插法建立链表" class="headerlink" title="前插法建立链表"></a>前插法建立链表</h3><p>从一个空表开始，重复读入数据，执行以下两步<br>（1）生成新的结点，将读入数据存放在新节点的的_data域中<br>（2）将该节点插入到链表的前端，直到读入到结束符为止。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; :: PushFront(const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">_head = _CreateNode(x);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt;  * prev = _CreateNode(x);</span><br><span class="line">prev-&gt;_next = _head;</span><br><span class="line">_head = prev;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="用后插法建立链表"><a href="#用后插法建立链表" class="headerlink" title="用后插法建立链表"></a>用后插法建立链表</h3><p>需要设置一个尾部指针end,总是指向新链表的最后一个节点，新节点链接到它所指链尾节点的后面。end最初要置于附加头节点位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::PushBack(const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">_head = _CreateNode(x);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * end = _head;</span><br><span class="line">while (end-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">end = end-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">end-&gt;_next = _CreateNode(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="从尾部删除一个数据"><a href="#从尾部删除一个数据" class="headerlink" title="从尾部删除一个数据"></a>从尾部删除一个数据</h3><p>考虑只有一个节点情况，多个结点的情况。<br>多个结点，首先找到尾部元素，然后调用clear()函数，清理掉尾部第一个元素</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; :: PopBack()</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;The List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else if (_head-&gt;_next == NULL)</span><br><span class="line">&#123;</span><br><span class="line">clear(_head);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * temp = _head;</span><br><span class="line">LinkNode&lt;T&gt; * end = _head;</span><br><span class="line">while (end-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">temp = end;</span><br><span class="line">end = end-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;_next = NULL;</span><br><span class="line">clear(end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="从头部删除一个元素"><a href="#从头部删除一个元素" class="headerlink" title="从头部删除一个元素"></a>从头部删除一个元素</h3><p>实现方法和从尾部删除一个元素基本相似，不多加以解释</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::PopFront()</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else if (_head -&gt;_next == NULL)</span><br><span class="line">&#123;</span><br><span class="line">clear(_head);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * tmp = _head;</span><br><span class="line">_head = _head-&gt;_next;</span><br><span class="line">clear(tmp);</span><br><span class="line">tmp = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="查找某一个元素"><a href="#查找某一个元素" class="headerlink" title="查找某一个元素"></a>查找某一个元素</h3><p>遍历整个链表，并将其数据_data与x进行比对，如果是其他类型就需要重载运算符==</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">LinkNode&lt;T&gt;* LinkList&lt;T&gt; ::Find (T x)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty,not found!!!&quot; &lt;&lt; endl;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">else if(_head-&gt;_data==x)</span><br><span class="line">&#123;</span><br><span class="line">return _head;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * n = _head ;</span><br><span class="line">while (n-&gt;_next != NULL &amp;&amp; n-&gt;_data != x )</span><br><span class="line">&#123;</span><br><span class="line">n = n-&gt;_next;</span><br><span class="line">if (n-&gt;_data == x)</span><br><span class="line">&#123;</span><br><span class="line">return n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="在第pos个元素后插入一个新元素"><a href="#在第pos个元素后插入一个新元素" class="headerlink" title="在第pos个元素后插入一个新元素"></a>在第pos个元素后插入一个新元素</h3><p>创建一个新的结点，通过移动begin指针，pos控制指针最终位置，将新元素插入到之后</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::Insert_right(int pos,const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">int len = Length();</span><br><span class="line">if (pos &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * begin = _head;</span><br><span class="line">LinkNode&lt;T&gt; * tmp = _CreateNode(x);</span><br><span class="line">while (--pos)</span><br><span class="line">&#123;</span><br><span class="line">if (begin-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">begin = begin-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;_next = begin-&gt;_next;</span><br><span class="line">begin-&gt;_next = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Input Error!!!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="在第pos个元素插入一个新元素"><a href="#在第pos个元素插入一个新元素" class="headerlink" title="在第pos个元素插入一个新元素"></a>在第pos个元素插入一个新元素</h3><p>因为写了一个在后面插入的函数，为了偷懒，就直接调用了Insert_right()这个函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::Insert_cur(int pos,const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">int len = Length();</span><br><span class="line">if (pos &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Insert_right(pos-1, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Input Error!!!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="在第pos个元素前插入一个新元素"><a href="#在第pos个元素前插入一个新元素" class="headerlink" title="在第pos个元素前插入一个新元素"></a>在第pos个元素前插入一个新元素</h3><p>创建一个新的结点，通过移动begin指针，pos控制指针最终位置，将新元素插入到之前，与插入之后实现方法基本类似，只是需要注意pos的控制</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::Insert_left(int pos,const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">int len = Length();</span><br><span class="line">int temp=pos-1;</span><br><span class="line">if (pos &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * begin = _head;</span><br><span class="line">LinkNode&lt;T&gt; * tmp = _CreateNode(x);</span><br><span class="line">while (--temp)</span><br><span class="line">&#123;</span><br><span class="line">if (begin-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">begin = begin-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;_next = begin-&gt;_next;</span><br><span class="line">begin-&gt;_next = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Input Error!!!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="删除第pos个元素"><a href="#删除第pos个元素" class="headerlink" title="删除第pos个元素"></a>删除第pos个元素</h3><p>依旧利用pos控制指针位置，然后删除就ok</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::Delete_pos(int pos)</span><br><span class="line">&#123;</span><br><span class="line">int len = Length();</span><br><span class="line">if (pos &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else if (_head-&gt;_next == NULL)</span><br><span class="line">&#123;</span><br><span class="line">clear(_head);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * begin = _head-&gt;_next;</span><br><span class="line">LinkNode&lt;T&gt; * temp = _head;</span><br><span class="line">pos = pos - 1;</span><br><span class="line">while (--pos)</span><br><span class="line">&#123;</span><br><span class="line">if (begin-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">begin = begin-&gt;_next;</span><br><span class="line">temp = temp-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;_next = begin-&gt;_next;</span><br><span class="line">begin-&gt;_next = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Input Error!!!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="查找某一个元素位置并返回其位置"><a href="#查找某一个元素位置并返回其位置" class="headerlink" title="查找某一个元素位置并返回其位置"></a>查找某一个元素位置并返回其位置</h3><p>用一个temp进行计数，遍历整个链表，一一进行比对其——data数据（若是其它类型就需要重载运算符“=”，后面的函数提到比对的都需要实现，才能进行比对）比对成功就返回，其它类的实现依然需要重载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">int LinkList&lt;T&gt; ::located(const T &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty,not found!!!&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if(_head-&gt;_data==x)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * n = _head ;</span><br><span class="line">int temp=0;</span><br><span class="line">while (n-&gt;_next != NULL &amp;&amp; n-&gt;_data != x )</span><br><span class="line">&#123;</span><br><span class="line">n = n-&gt;_next;</span><br><span class="line">temp++;</span><br><span class="line">if (n-&gt;_data == x)</span><br><span class="line">&#123;</span><br><span class="line">return temp+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="删除指定的元素遍历链表"><a href="#删除指定的元素遍历链表" class="headerlink" title="删除指定的元素遍历链表"></a>删除指定的元素遍历链表</h3><p>一一比对，找到就调用chear()函数删除并清理空间</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkList&lt;T&gt; ::Delete_val(const T &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else if (_head-&gt;_next == NULL &amp;&amp; _head-&gt;_data == x)</span><br><span class="line">&#123;</span><br><span class="line">clear(_head);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if(_head-&gt;_data==x)&#123;</span><br><span class="line">while(1)&#123;</span><br><span class="line">if(_head-&gt;_data!=x)break;</span><br><span class="line">PopFront();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * n = Find(x);</span><br><span class="line">if(n==NULL)break;</span><br><span class="line">else&#123;</span><br><span class="line">LinkNode&lt;T&gt; * begin = _head;</span><br><span class="line">while (begin-&gt;_next != n &amp;&amp; begin-&gt;_next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">begin = begin-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">begin-&gt;_next = n-&gt;_next;</span><br><span class="line">clear(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="更新指定元素的值"><a href="#更新指定元素的值" class="headerlink" title="更新指定元素的值"></a>更新指定元素的值</h3><p>遍历链表，一一比对（<strong>前面提到了重载的</strong>），找到要更新的元素后就将新的值赋值给它</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void LinkList&lt;T&gt;::reset(const T &amp;x,const T &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">if (_head == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;List is empty!!!&quot; &lt;&lt; endl;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode&lt;T&gt; * n = Find(x);</span><br><span class="line">if(n==NULL)break;</span><br><span class="line">else&#123;</span><br><span class="line">n-&gt;_data=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="链表的数据写入文件"><a href="#链表的数据写入文件" class="headerlink" title="链表的数据写入文件"></a>链表的数据写入文件</h3><p>能实现所有数据的储存，但是如果是其他类，写入没有问题，如果想从同一个文件中读入之前写的数据，遇到一些困难没有实现，但是基本数据类型是ok的,测试函数就表现出来了的（其它类的读入需要重载输入流，输出流）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool LinkList&lt;T&gt;::writeToFile()</span><br><span class="line">&#123;</span><br><span class="line">ofstream writefile(&quot;data.txt&quot;);</span><br><span class="line">int len;</span><br><span class="line">len=Length();</span><br><span class="line">writefile&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">LinkNode&lt;T&gt; * begin=_head;</span><br><span class="line">while(begin!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">writefile&lt;&lt;begin-&gt;_data&lt;&lt;endl;</span><br><span class="line">begin=begin-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="从文件读入先前写入的数据，上面有提到只能满足基本数据类型"><a href="#从文件读入先前写入的数据，上面有提到只能满足基本数据类型" class="headerlink" title="从文件读入先前写入的数据，上面有提到只能满足基本数据类型"></a>从文件读入先前写入的数据，上面有提到只能满足基本数据类型</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">inline T* LinkList&lt;T&gt;::readFromFile()</span><br><span class="line">&#123;</span><br><span class="line">ifstream readfile(&quot;data.txt&quot;);</span><br><span class="line">int length;</span><br><span class="line">readfile&gt;&gt;length;</span><br><span class="line">T *temp=new T[length];</span><br><span class="line">for(int i=0;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line">readfile&gt;&gt;temp[i];</span><br><span class="line">&#125;</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="为了更好的操作，测试相关函数的功能，写了这样一个函数来从文件得到链表长度的函数"><a href="#为了更好的操作，测试相关函数的功能，写了这样一个函数来从文件得到链表长度的函数" class="headerlink" title="为了更好的操作，测试相关函数的功能，写了这样一个函数来从文件得到链表长度的函数"></a>为了更好的操作，测试相关函数的功能，写了这样一个函数来从文件得到链表长度的函数</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">inline int LinkList&lt;T&gt;::readlen()</span><br><span class="line">&#123;</span><br><span class="line">ifstream readfile(&quot;data.txt&quot;);</span><br><span class="line">int length;</span><br><span class="line">readfile&gt;&gt;length;</span><br><span class="line">return length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="写到这基本上函数的功能都实现了，这个链表结构肯定有很多不完善的地方，第一次写博客，还望大家见谅。上面提到了其它类的重载问题，我就把写的一个point类分享给大家。"><a href="#写到这基本上函数的功能都实现了，这个链表结构肯定有很多不完善的地方，第一次写博客，还望大家见谅。上面提到了其它类的重载问题，我就把写的一个point类分享给大家。" class="headerlink" title="写到这基本上函数的功能都实现了，这个链表结构肯定有很多不完善的地方，第一次写博客，还望大家见谅。上面提到了其它类的重载问题，我就把写的一个point类分享给大家。"></a>写到这基本上函数的功能都实现了，这个链表结构肯定有很多不完善的地方，第一次写博客，还望大家见谅。上面提到了其它类的重载问题，我就把写的一个point类分享给大家。</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Point</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">double x;</span><br><span class="line">double y;</span><br><span class="line">public:</span><br><span class="line">Point(double x=0.0,double y=0.0)</span><br><span class="line">&#123;this-&gt;x=x,this-&gt;y=y;&#125;</span><br><span class="line">void setdata(double a,double b)</span><br><span class="line">&#123;this-&gt;x=a;this-&gt;y=b;&#125;</span><br><span class="line">Point operator=(Point a);//重载运算符“=”</span><br><span class="line">int operator==(Point a);//重载运算符“==”</span><br><span class="line">int operator!=(Point a);</span><br><span class="line">double getx()</span><br><span class="line">&#123;return x;&#125;</span><br><span class="line">double gety()</span><br><span class="line">&#123;return y;&#125;</span><br><span class="line">//重载输入流</span><br><span class="line">friend istream &amp;operator&gt;&gt;(istream &amp;is,Point &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">is&gt;&gt;p.x;</span><br><span class="line">is&gt;&gt;p.y;</span><br><span class="line">return is;</span><br><span class="line">&#125;//重载输出流</span><br><span class="line">friend ostream &amp;operator&lt;&lt;(ostream &amp;os,Point p)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;&quot;(&quot;&lt;&lt;p.x&lt;&lt;&quot;,&quot;&lt;&lt;p.y&lt;&lt;&quot;)&quot;;</span><br><span class="line">return os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inline Point Point::operator=(Point a)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;x=a.x;</span><br><span class="line">this-&gt;y=a.y;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">inline int Point::operator==(Point a)</span><br><span class="line">&#123;</span><br><span class="line">if(this-&gt;x==a.getx()&amp;&amp;this-&gt;y==a.gety())</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline int Point::operator!=(Point a)</span><br><span class="line">&#123;</span><br><span class="line">if(this-&gt;x!=a.getx()&amp;&amp;this-&gt;y!=a.gety())</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else if(this-&gt;x!=a.getx()||this-&gt;y!=a.gety())&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="一个输入之后的展示"><a href="#一个输入之后的展示" class="headerlink" title="一个输入之后的展示"></a>一个输入之后的展示</h3><p><img src="https://img-blog.csdnimg.cn/20190920122835383.png" alt="int类型的展示"><br><img src="https://img-blog.csdnimg.cn/20190920122915876.png" alt="point类的实现"></p><h3 id="完整代码我已经上传到github，欢迎Clone-第一次写博客，有什么做的不够好的希望大家提出来，我继续改进，继续加油。作为一个大学生可能没有太多时间更新，希望大家见谅！！！"><a href="#完整代码我已经上传到github，欢迎Clone-第一次写博客，有什么做的不够好的希望大家提出来，我继续改进，继续加油。作为一个大学生可能没有太多时间更新，希望大家见谅！！！" class="headerlink" title="完整代码我已经上传到github，欢迎Clone.第一次写博客，有什么做的不够好的希望大家提出来，我继续改进，继续加油。作为一个大学生可能没有太多时间更新，希望大家见谅！！！"></a>完整代码我已经上传到github，欢迎Clone.第一次写博客，有什么做的不够好的希望大家提出来，我继续改进，继续加油。作为一个大学生可能没有太多时间更新，希望大家见谅！！！</h3><p><strong><a href="https://github.com/xjh199923/LinkList.git" target="_blank" rel="noopener">项目github地址</a></strong></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的储存结构及相关操作</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><h1 id="栈的储存结构及相关操作"><a href="#栈的储存结构及相关操作" class="headerlink" title="栈的储存结构及相关操作"></a>栈的储存结构及相关操作</h1><p>1.实现栈的存储结构及相关操作：进栈、出栈、取栈顶元素等<br>2.使用该栈完成一个字符串的逆序输出<br>3.使用该栈完成表达式的括号是否匹配?<br>4.对算术表达式求值</p><p><img src="https://img-blog.csdnimg.cn/20191009212043477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="界面"></p><a id="more"></a><h2 id="主要的相关实现函数"><a href="#主要的相关实现函数" class="headerlink" title="主要的相关实现函数"></a>主要的相关实现函数</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* elements;<span class="comment">//存放栈中元素的数组</span></span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//栈顶元素的指针</span></span><br><span class="line"><span class="keyword">int</span> maxSize;<span class="comment">//栈的最大容纳元素个数</span></span><br><span class="line"><span class="comment">//void overflowProcess();//栈的溢出处理操作</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Stack(<span class="keyword">int</span> size=basesize)<span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxSize=size;</span><br><span class="line">top=<span class="number">-1</span>;</span><br><span class="line">creatStack(size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~Stack()&#123;<span class="keyword">delete</span> []elements;&#125;<span class="comment">//析构函数，释放栈的空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatStack</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//创建一个大小为n的栈，并为其动态分配空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span>;<span class="comment">//元素x入栈</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(T&amp; x)</span></span>;<span class="comment">//栈顶元素出栈</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//判满函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判空函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxsize</span><span class="params">()</span><span class="comment">//得到栈的最大体积</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> maxSize;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">getTopelements</span><span class="params">()</span></span>;<span class="comment">//得到栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTop</span><span class="params">()</span><span class="comment">//得到栈的top指针的地址，因为是采用数组类型储存，因此top指针可以利用数组的下标得到</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> top;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">string</span> tape)</span></span>;<span class="comment">//展示各种类型的数据，控制格式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">writeToFile</span><span class="params">(<span class="built_in">string</span> filename)</span></span>;<span class="comment">//将数据写入指定文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">readFromFile</span><span class="params">(<span class="built_in">string</span> filename)</span></span>;<span class="comment">//将数据从指定文件读入</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2 id="栈的各个函数的实现"><a href="#栈的各个函数的实现" class="headerlink" title="栈的各个函数的实现"></a>栈的各个函数的实现</h2><h3 id="创建一个大小为n的栈"><a href="#创建一个大小为n的栈" class="headerlink" title="创建一个大小为n的栈"></a>创建一个大小为n的栈</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">Stack</span>&lt;T&gt;:</span>:creatStack(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">elements = <span class="keyword">new</span> T(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(elements==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"动态分配错误！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="元素x入栈"><a href="#元素x入栈" class="headerlink" title="元素x入栈"></a>元素x入栈</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果栈isFull(),则进行溢出处理，否则将其插入到栈顶</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">Stack</span>&lt;T&gt;:</span>:Push(<span class="keyword">const</span> T &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isFull()==<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//overflowProcess();//溢出处理，调整空间大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">elements[++top]=x;<span class="comment">//将x入栈</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">### 栈顶元素出栈，以x的引用返回</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="comment">//栈顶元素出栈，如果栈为空返回false;若栈不为空，栈顶元素出栈，top指针减一</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">Stack</span>&lt;T&gt;:</span>:Pop(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">x=getTopelements();</span><br><span class="line"></span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="判满函数"><a href="#判满函数" class="headerlink" title="判满函数"></a>判满函数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否满，如果满返回true,未满返回false</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">Stack</span>&lt;T&gt;:</span>:isFull()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>-&gt;getTop()&lt;<span class="keyword">this</span>-&gt;getMaxsize())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="判空函数"><a href="#判空函数" class="headerlink" title="判空函数"></a>判空函数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否空，如果满返回true,未满返回false</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">Stack</span>&lt;T&gt;:</span>:isEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>-&gt;getTop()==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">Stack</span>&lt;T&gt;:</span>:print(<span class="built_in">string</span> tape)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"This Stack is empty!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;getTop();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"["</span>&lt;&lt;elements[i]&lt;&lt;<span class="string">"]&lt;-"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"["</span>&lt;&lt;elements[getTop()]&lt;&lt;<span class="string">"]"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="得到栈顶元素"><a href="#得到栈顶元素" class="headerlink" title="得到栈顶元素"></a>得到栈顶元素</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">Stack</span>&lt;T&gt;:</span>:getTopelements()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> elements[getTop()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="文件相关读写操作"><a href="#文件相关读写操作" class="headerlink" title="文件相关读写操作"></a>文件相关读写操作</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">Stack</span>&lt;T&gt;:</span>:writeToFile(<span class="built_in">string</span> filename)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">writefile</span><span class="params">(filename)</span></span>;</span><br><span class="line">T temp[basesize];</span><br><span class="line">T x;</span><br><span class="line"><span class="keyword">int</span> i,count;</span><br><span class="line">count=getTop()+<span class="number">1</span>;</span><br><span class="line">writefile&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">temp[i]=getTopelements();</span><br><span class="line">Pop(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=count<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line">writefile&lt;&lt;temp[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">Stack</span>&lt;T&gt;:</span>:readFromFile(<span class="built_in">string</span> filename)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">readfile</span><span class="params">(filename)</span></span>;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">readfile&gt;&gt;len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">T temp;</span><br><span class="line">readfile&gt;&gt;temp;</span><br><span class="line"><span class="keyword">this</span>-&gt;Push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用栈实现字符串的逆序"><a href="#利用栈实现字符串的逆序" class="headerlink" title="利用栈实现字符串的逆序"></a>利用栈实现字符串的逆序</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span> temp[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(temp);</span><br><span class="line">Stack&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="keyword">char</span> str[len+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//str[len]='\0';</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">st.Push(temp[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i]=st.getTopelements();</span><br><span class="line">st.Pop(x);</span><br><span class="line">&#125;</span><br><span class="line">str[len]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"逆序后的字符串为:"</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用栈实现括号是否匹配的判断"><a href="#利用栈实现括号是否匹配的判断" class="headerlink" title="利用栈实现括号是否匹配的判断"></a>利用栈实现括号是否匹配的判断</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bracketMatching</span><span class="params">(<span class="keyword">char</span> expression[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(expression);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(expression[i<span class="number">-1</span>]==<span class="string">'('</span>)&#123;</span><br><span class="line"><span class="built_in">stack</span>.Push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(expression[i<span class="number">-1</span>]==<span class="string">')'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>.Pop(j)==<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;j&lt;&lt;<span class="string">"个 “(” 与第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个 “)” 匹配!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"没有与第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个 “)” 匹配的 “(” ！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">stack</span>.isEmpty()==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="built_in">stack</span>.Pop(j);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"没有与第"</span>&lt;&lt;j&lt;&lt;<span class="string">"个 “(” 匹配的 “)”！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="利用栈实现表达式的求值"><a href="#利用栈实现表达式的求值" class="headerlink" title="利用栈实现表达式的求值"></a>利用栈实现表达式的求值</h2><h3 id="（满足小数，多位数，整数的计算）"><a href="#（满足小数，多位数，整数的计算）" class="headerlink" title="（满足小数，多位数，整数的计算）"></a>（满足小数，多位数，整数的计算）</h3><h3 id="其中最重要的算法实现，中缀表达式转后缀表达式，利用容器保存各个操作数，以便实现多位数，小数的实现"><a href="#其中最重要的算法实现，中缀表达式转后缀表达式，利用容器保存各个操作数，以便实现多位数，小数的实现" class="headerlink" title="其中最重要的算法实现，中缀表达式转后缀表达式，利用容器保存各个操作数，以便实现多位数，小数的实现"></a>其中最重要的算法实现，中缀表达式转后缀表达式，利用容器保存各个操作数，以便实现多位数，小数的实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中缀表达式转后缀表达式</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; convert(<span class="built_in">string</span> input)&#123;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">char</span>&gt; stk;<span class="comment">//存储操作符栈</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; temp;</span><br><span class="line"><span class="keyword">char</span> s;</span><br><span class="line"><span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> length = (<span class="keyword">int</span>)input.length();<span class="comment">//获取表达式的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">tmp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((input[i]&gt;=<span class="string">'0'</span> &amp;&amp; input[i]&lt;=<span class="string">'9'</span>))&#123;</span><br><span class="line">tmp += input[i];</span><br><span class="line"><span class="keyword">while</span>((i+<span class="number">1</span>&lt;input.size() &amp;&amp; input[i+<span class="number">1</span>]&gt;=<span class="string">'0'</span> &amp;&amp; input[i+<span class="number">1</span>]&lt;=<span class="string">'9'</span>)||input[i+<span class="number">1</span>] == <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp += input[i+<span class="number">1</span>];<span class="comment">//若是连续数字</span></span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">temp.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(input[i] == <span class="string">'('</span>)&#123;</span><br><span class="line"><span class="comment">//遇到左括号直接入栈</span></span><br><span class="line">stk.Push(input[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(input[i] == <span class="string">')'</span>)&#123;</span><br><span class="line"><span class="comment">//如果遇到右括号的话，就把一直到最近的左括号之间的都弹出来加入temp中</span></span><br><span class="line"><span class="keyword">while</span>(stk.getTopelements() != <span class="string">'('</span>)&#123;</span><br><span class="line">tmp += stk.getTopelements();</span><br><span class="line">temp.push_back(tmp);</span><br><span class="line">stk.Pop(s);</span><br><span class="line">tmp=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">stk.Pop(s);<span class="comment">//把左括号弹出栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(isMark(input[i]))&#123;</span><br><span class="line"><span class="comment">//如果是运算符的话，比较他们的优先级再决定是否入栈</span></span><br><span class="line"><span class="keyword">while</span>( prior(input[i])&lt;=prior(stk.getTopelements()) )&#123;</span><br><span class="line"><span class="comment">//如果当前的优先级小于等于栈顶操作符的话，栈顶操作符弹出，加入temp</span></span><br><span class="line">tmp += stk.getTopelements();</span><br><span class="line">temp.push_back(tmp);</span><br><span class="line">stk.Pop(s);</span><br><span class="line">tmp=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果当前的优先级大于栈顶操作符的话，入栈</span></span><br><span class="line">stk.Push(input[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已经扫描到中缀表达式的末尾，就把栈中的操作符都弹出来加入到temp中</span></span><br><span class="line"><span class="keyword">while</span>(!stk.isEmpty())&#123;</span><br><span class="line">tmp=<span class="string">""</span>;</span><br><span class="line">tmp += stk.getTopelements();</span><br><span class="line">temp.push_back(tmp);</span><br><span class="line">stk.Pop(s);</span><br><span class="line">tmp=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="计算表达式的最终结果"><a href="#计算表达式的最终结果" class="headerlink" title="计算表达式的最终结果"></a>计算表达式的最终结果</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算后缀表达式的最终数值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; retu)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">Stack&lt;<span class="keyword">double</span>&gt; optNum;<span class="comment">//定义一个操作数栈</span></span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x1,x2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; retu.size(); i++)&#123;<span class="comment">//没有遇到结束标志#，即进行表达式的计算</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> tmp = retu[i];</span><br><span class="line"><span class="keyword">if</span>(tmp[<span class="number">0</span>] &gt;= <span class="string">'0'</span>&amp;&amp;tmp[<span class="number">0</span>] &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">num = atof(tmp.c_str());</span><br><span class="line">optNum.Push(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"+"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push(x1+x2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"-"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push(x2-x1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"*"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push(x1*x2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"/"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push(x2/x1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"%"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push((<span class="keyword">int</span>)x2%(<span class="keyword">int</span>)x1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(retu[i] == <span class="string">"^"</span>)&#123;</span><br><span class="line">x1 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">x2 = optNum.getTopelements();</span><br><span class="line">optNum.Pop(s);</span><br><span class="line">optNum.Push(<span class="built_in">pow</span>(x2, x1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> optNum.getTopelements();<span class="comment">//返回最终的计算结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">result</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">str = format(str);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; bh = convert(str);</span><br><span class="line"><span class="keyword">double</span> k = calculate(bh);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="对“-”号的特殊化处理"><a href="#对“-”号的特殊化处理" class="headerlink" title="对“-”号的特殊化处理"></a>对“-”号的特殊化处理</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">format</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.length(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">str.insert(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i<span class="number">-1</span>] == <span class="string">'('</span>)&#123;</span><br><span class="line">str.insert(i,<span class="number">1</span>,<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="操作符的优先级"><a href="#操作符的优先级" class="headerlink" title="操作符的优先级"></a>操作符的优先级</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="keyword">char</span> op)</span></span>&#123;<span class="comment">//求运算符优先级</span></span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'^'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="完整的代码我已经上传到github，有需要的自行clone，有什么错误的地方欢迎大家指出来，共同学习进步。希望得到大家的支持和鼓励，加油！！！（下一篇更新利用qt，栈的表达式求值，写一个简易的计算器）"><a href="#完整的代码我已经上传到github，有需要的自行clone，有什么错误的地方欢迎大家指出来，共同学习进步。希望得到大家的支持和鼓励，加油！！！（下一篇更新利用qt，栈的表达式求值，写一个简易的计算器）" class="headerlink" title="完整的代码我已经上传到github，有需要的自行clone，有什么错误的地方欢迎大家指出来，共同学习进步。希望得到大家的支持和鼓励，加油！！！（下一篇更新利用qt，栈的表达式求值，写一个简易的计算器）"></a>完整的代码我已经上传到github，有需要的自行clone，有什么错误的地方欢迎大家指出来，共同学习进步。希望得到大家的支持和鼓励，加油！！！（下一篇更新利用qt，栈的表达式求值，写一个简易的计算器）</h5><p><a href="https://github.com/xjh199923/Stack.git" target="_blank" rel="noopener">Stack栈实现的相关代码</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接插入排序</title>
      <link href="/posts/20352.html"/>
      <url>/posts/20352.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>直接插入排序,插入排序(insert sort)的基本方法是：每步将一个待排序的元素，按其排序码大小，插入到前面已经排好序的一组元素的适当位置上去，直到元素全部插入为止。</p><a id="more"></a><div class="note info"><p>==算法描述:==<br>直接插入排序（insert sort)的基本思想是：当插入第 i (i≥1)个元素时，前面的v[0]，v[1]……..VIi-1]已经排好序：这时，用V[i]的排序码与V[i-1]，V[i一2]，…的排序码顺序进行比较，找到插入位置即将V[i]插人，原来位置上的元素向后顺移。假设其中v[0],…….v[i-1]已经是一组有序的元素，V[i]，V[i+1]，…，V[n-1]是待插入的元素，排序过程从i=1起，每一趟执行完后，i增加1，把第i个元素插入到前面有序的元素序列中去，使插入后元素序列V[0]，V[1]，…V[i]仍保持有序。</p><p>算法过程：</p><p>原始序列：3、44、38、5、47、15、36、 26、27、2、46、4、19、50、48</p><p>放上插入排序的动态图让大家更容易理解这个过程:</p><p><img src="https://img-blog.csdnimg.cn/20191113225534656.gif" alt="在这里插入图片描述"><br>结果：{2、3、4、5、19、26、27、36、38、44、46、47、48、50}</p></div><h2 id="插入排序的C-Java-Python实现"><a href="#插入排序的C-Java-Python实现" class="headerlink" title="插入排序的C++,Java,Python实现"></a>插入排序的C++,Java,Python实现</h2><p><strong>本篇文章会给大家介绍直接插入排序的三种语言的实现，在后面的文章中我会更新其他的插入排序，在这里先给大家分享简单一点的插入排序，循序渐进</strong></p><h3 id="插入排序C-实现代码："><a href="#插入排序C-实现代码：" class="headerlink" title="插入排序C++实现代码："></a>插入排序C++实现代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NUM=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];<span class="comment">//定义一个产生数组储存100个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; randsample=get_random(<span class="number">100</span>,MAX_NUM);<span class="comment">//产生100个0-MAZX_NUM的随机数,每次产生的随机数不一样</span></span><br><span class="line"><span class="keyword">int</span> size=randsample.size();</span><br><span class="line"><span class="comment">//输出最开始时未排序时的顺序:</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"随机数的顺序："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;randsample[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">clock_t</span> start,finish;<span class="comment">//定义一个测量一段程序运行时间的前后值</span></span><br><span class="line"><span class="keyword">double</span> totaltime;<span class="comment">//总的运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试插入排序</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"执行插入排序后:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">data[i]=randsample[i];</span><br><span class="line">&#125;</span><br><span class="line">start=clock();</span><br><span class="line">InsertSort(size);</span><br><span class="line">finish=clock();</span><br><span class="line">output(size);</span><br><span class="line">totaltime=(<span class="keyword">double</span>)(finish-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"运行时间："</span>&lt;&lt;totaltime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生随机数的函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(N);<span class="comment">//N代表初始状态分配的空间大小</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out_vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line">vec[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> rand_value=rand()%N;</span><br><span class="line">out_vec.push_back(vec[rand_value]);</span><br><span class="line">vec[rand_value]=vec[N<span class="number">-1</span>];<span class="comment">//将数组vec的元素</span></span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out_vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i]&lt;data[i<span class="number">-1</span>])&#123;</span><br><span class="line">count++;</span><br><span class="line">tmp=data[i];</span><br><span class="line">j=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;tmp&lt;data[j])&#123;</span><br><span class="line">count++;</span><br><span class="line">data[j+<span class="number">1</span>]=data[j];</span><br><span class="line">count1++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">data[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"比较次数: "</span>&lt;&lt;count&lt;&lt;<span class="string">"  移动次数:  "</span>&lt;&lt;count1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>测试结果展示：<br><img src="https://img-blog.csdnimg.cn/20191113224207448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="插入排序Java代码实现"><a href="#插入排序Java代码实现" class="headerlink" title="插入排序Java代码实现"></a>插入排序Java代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object []arr = getRandomNumList(<span class="number">100</span>,<span class="number">0</span>,<span class="number">10000</span>).toArray();</span><br><span class="line">    <span class="keyword">int</span>[] ins = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>] ;</span><br><span class="line">    System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      String s=arr[i].toString();</span><br><span class="line">      ins[i]= Integer.parseInt( s );</span><br><span class="line">      System.out.println(ins[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">    <span class="keyword">int</span>[] ins2 = insertsort(ins);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      System.out.println(ins2[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertsort(<span class="keyword">int</span>[] data)&#123;</span><br><span class="line">  <span class="keyword">int</span> tmp;</span><br><span class="line">  <span class="keyword">int</span> n = data.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i]&lt;data[i-<span class="number">1</span>])&#123;</span><br><span class="line">tmp=data[i];</span><br><span class="line">j=i-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;tmp&lt;data[j])&#123;</span><br><span class="line">data[j+<span class="number">1</span>]=data[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">data[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//定义生成随机数并且装入集合容器的方法</span></span><br><span class="line">    <span class="comment">//方法的形参列表分别为：生成随机数的个数、生成随机数的值的范围最小值为start(包含start)、值得范围最大值为end(不包含end)  可取值范围可表示为[start,end)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getRandomNumList</span><span class="params">(<span class="keyword">int</span> nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合容器对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//循环将得到的随机数进行判断，如果随机数不存在于集合中，则将随机数放入集合中，如果存在，则将随机数丢弃不做操作，进行下一次循环，直到集合长度等于nums</span></span><br><span class="line">        <span class="keyword">while</span>(list.size() != nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(end-start) + start;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(num))&#123;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="插入排序Python代码实现"><a href="#插入排序Python代码实现" class="headerlink" title="插入排序Python代码实现"></a>插入排序Python代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>]):</span><br><span class="line">            tmp = nums[i]</span><br><span class="line">            j = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> <span class="keyword">and</span> tmp&lt;nums[j]):</span><br><span class="line">                nums[j+<span class="number">1</span>] = nums[j]</span><br><span class="line">                j=j<span class="number">-1</span></span><br><span class="line">            nums[j+<span class="number">1</span>]=tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    arr =[]</span><br><span class="line">    <span class="keyword">while</span>(len(arr)&lt;<span class="number">100</span>):</span><br><span class="line">        x=random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> arr:</span><br><span class="line">            arr.append(x)</span><br><span class="line">    InsertSort(arr)</span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><div class="note info"><p>若设待排序的元素个数为n，则该算法的主程序执行n-1趟。因为排序码比较次数和元素移动次数与元素排序码的初始排列有关，所以在最好情况下，即在排序前元素已经按排序码大小从小到大排好序了，每趟只需与前面的有序元素序列的最后一个元素的排序码比较1次，总的排序码比较次数为n-1，元素移动次数为0。而在最差情况下，即第 i 趟时第 i 个元素必须与前面个元素都做排序码比较，并且每做1次较就要做1次数据移动，则总的排序码比较次数KCN和元素移动次数RMN分别为：</p><p>KCN=$\sum_{i=1}^{n-1}{i}$=n(n-1)/2$\approx$ $n^2$/2.<br>RMN=$\sum_{i=1}^{n-1}{(i+2)}$=(n+4)(n-1)/2$\approx$ $n^2$/2</p><p>从以上讨论可知，直接插入排序的运行时间和待排序元素的原始排列顺序密切相关。若待排序元素序列中出现各种可能排列的概率相同，则可取上述最好情况和最差情况的平均情况。在平均情况下的排序码比较次数和元素移动次数约为$n^2$/4。因此，直接插入插序的时间复杂度为O($n^2$)。直接插入排序是一种稳定的排序方法。</p></div><div class="note success"><p><strong><font color="#5cb85c">继续加油!</font></strong></p><p>以上就是本次给大家分享的直接插入排序,后面还会写其他的插入排序，如果有什么不足之处欢迎大家指出，留言，互相学习，共同进步。希望得到大家的支持,你的支持就是我前进的动力,接下来我会持续更新其他的排序算法，敬请期待！(写博客学到了很多东西，嘻嘻)</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
          <category> Java </category>
          
          <category> Python </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/posts/15468.html"/>
      <url>/posts/15468.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>希尔排序（Shell sort)这个排序方法又称为缩小增量排序(diminishing increment Sort)，是1959年由D.L.Shell提出来的。该方法的基本思想是：设待排序元素序列有n个元素，首先取一个整数gap&lt;n作为间隔，将全部元素分为gap个子序列，所有距离为gap的元素放在同一个子序列中，在每一个子序列中分别施行直接插入排序，然后缩小间距gap.例如取gap=[gap/21，重复上述的子序列划分和排序工作。直到最后取gap==1，将所有元素放在同一个序列中排序为止。由于开始时gap的取值较大，每个子序列中的元素较少，排序速度较快；待到排序的后期，gap取值逐渐变小，子序列中元素个数逐渐变多，但由于前面工作的基础，大多数元素已基本有序，所以排序速度仍然很快。</p><a id="more"></a><div class="note info"><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：<br>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；<br>按增量序列个数k，对序列进行k 趟排序；每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p><p>举个栗子</p><p>原始序列：84、83、88、87、61、50、70、 60、80、99</p><p>1）第一趟，84对应50，50比84小，交换。</p><p>结果：[ 50]、83、88、87、61、[84]、70、 60、80、99</p><p>2） 第二趟，83对应70，70比83小，交换。</p><p>结果：50、[70]、88、87、61、84、[83]、 60、80、99</p><p>3）依次如此，把剩余的都按这样排好。</p><p>结果：50、70、60、80、61、84、83、 88、87、99</p><p>4）缩小间隔步幅为2，分别对其进行插入排序</p><p>结果：50、70、60、80、61、84、83、 88、87、99</p><p>……………</p><p>5）依次类推直到步幅间隔为1</p><p>结果： 50、60、61、70、80、83、84、 87、88、99</p><p>最后如果还没有理解这个过程的话，小编放上一个动图，让大家更深入的理解这个过程：</p><p><img src="https://img-blog.csdnimg.cn/20191115154530231.gif" alt="在这里插入图片描述"></p></div><h2 id="接下来就是希尔排序的算法实现喽"><a href="#接下来就是希尔排序的算法实现喽" class="headerlink" title="接下来就是希尔排序的算法实现喽"></a>接下来就是希尔排序的算法实现喽</h2><h3 id="希尔排序C-实现代码："><a href="#希尔排序C-实现代码：" class="headerlink" title="希尔排序C++实现代码："></a>希尔排序C++实现代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NUM=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];<span class="comment">//定义一个产生数组储存100个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; randsample=get_random(<span class="number">100</span>,MAX_NUM);<span class="comment">//产生100个0-MAZX_NUM的随机数,每次产生的随机数不一样</span></span><br><span class="line"><span class="keyword">int</span> size=randsample.size();</span><br><span class="line"><span class="comment">//输出最开始时未排序时的顺序:</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"随机数的顺序："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;randsample[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">clock_t</span> start,finish;<span class="comment">//定义一个测量一段程序运行时间的前后值</span></span><br><span class="line"><span class="keyword">double</span> totaltime;<span class="comment">//总的运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试希尔排序</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"执行希尔排序后:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">data[i]=randsample[i];</span><br><span class="line">&#125;</span><br><span class="line">start=clock();</span><br><span class="line">ShellSort(size);</span><br><span class="line">finish=clock();</span><br><span class="line">output(size);</span><br><span class="line">totaltime=(<span class="keyword">double</span>)(finish-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"运行时间："</span>&lt;&lt;totaltime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生随机数的函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(N);<span class="comment">//N代表初始状态分配的空间大小</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out_vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line">vec[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> rand_value=rand()%N;</span><br><span class="line">out_vec.push_back(vec[rand_value]);</span><br><span class="line">vec[rand_value]=vec[N<span class="number">-1</span>];<span class="comment">//将数组vec的元素</span></span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out_vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> gap=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(gap&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap=gap/<span class="number">3</span>+<span class="number">1</span>;<span class="comment">//求下一增量值</span></span><br><span class="line"><span class="keyword">for</span>(i=gap;i&lt;n;i++)&#123;<span class="comment">//各个子序列交替处理</span></span><br><span class="line"><span class="keyword">if</span>(data[i]&lt;data[i-gap])&#123;<span class="comment">//逆序</span></span><br><span class="line">    count++;</span><br><span class="line">temp=data[i];</span><br><span class="line">j=i-gap;</span><br><span class="line"><span class="keyword">while</span> (j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;data[j]) &#123;</span><br><span class="line">count++;</span><br><span class="line">data[j+gap]=data[j];<span class="comment">//后移元素</span></span><br><span class="line">count1++;</span><br><span class="line">j=j-gap;<span class="comment">//再比较前一元素</span></span><br><span class="line">&#125;</span><br><span class="line">data[j+gap]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"比较次数: "</span>&lt;&lt;count&lt;&lt;<span class="string">"  移动次数:  "</span>&lt;&lt;count1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://img-blog.csdnimg.cn/20191115161025158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="希尔排序Java代码实现"><a href="#希尔排序Java代码实现" class="headerlink" title="希尔排序Java代码实现"></a>希尔排序Java代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object []arr = getRandomNumList(<span class="number">100</span>,<span class="number">0</span>,<span class="number">10000</span>).toArray();</span><br><span class="line">    <span class="keyword">int</span>[] ins = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>] ;</span><br><span class="line">    System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      String s=arr[i].toString();</span><br><span class="line">      ins[i]= Integer.parseInt( s );</span><br><span class="line">      System.out.println(ins[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">    <span class="keyword">int</span>[] ins2 = shellSort(ins);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      System.out.println(ins2[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] data)&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> n = data.length;</span><br><span class="line"><span class="keyword">int</span> gap=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">while</span>(gap&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap=gap/<span class="number">3</span>+<span class="number">1</span>;<span class="comment">//求下一增量值</span></span><br><span class="line"><span class="keyword">for</span>(i=gap;i&lt;n;i++)&#123;<span class="comment">//各个子序列交替处理</span></span><br><span class="line"><span class="keyword">if</span>(data[i]&lt;data[i-gap])&#123;<span class="comment">//逆序</span></span><br><span class="line">temp=data[i];</span><br><span class="line">j=i-gap;</span><br><span class="line"><span class="keyword">while</span> (j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;data[j]) &#123;</span><br><span class="line">data[j+gap]=data[j];<span class="comment">//后移元素</span></span><br><span class="line">j=j-gap;<span class="comment">//再比较前一元素</span></span><br><span class="line">&#125;</span><br><span class="line">data[j+gap]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//定义生成随机数并且装入集合容器的方法</span></span><br><span class="line">    <span class="comment">//方法的形参列表分别为：生成随机数的个数、生成随机数的值的范围最小值为start(包含start)、值得范围最大值为end(不包含end)  可取值范围可表示为[start,end)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getRandomNumList</span><span class="params">(<span class="keyword">int</span> nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合容器对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//循环将得到的随机数进行判断，如果随机数不存在于集合中，则将随机数放入集合中，如果存在，则将随机数丢弃不做操作，进行下一次循环，直到集合长度等于nums</span></span><br><span class="line">        <span class="keyword">while</span>(list.size() != nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(end-start) + start;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(num))&#123;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="希尔排序Python代码实现"><a href="#希尔排序Python代码实现" class="headerlink" title="希尔排序Python代码实现"></a>希尔排序Python代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellsort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment">#希尔排序</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    step = <span class="number">2</span></span><br><span class="line">    group = round(count / step)</span><br><span class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:  <span class="comment">#通过group增量分组循环</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</span><br><span class="line">            j = i + group</span><br><span class="line">            <span class="keyword">while</span> j &lt; count:  <span class="comment">#分组中key值的索引，通过增量自增</span></span><br><span class="line">                k = j - group</span><br><span class="line">                key = lists[j]</span><br><span class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:  <span class="comment">#分组中进行插入排序</span></span><br><span class="line">                    <span class="keyword">if</span> lists[k] &gt; key:</span><br><span class="line">                        lists[k + group], lists[k] = lists[k], key</span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                    k -= group</span><br><span class="line">                j += group</span><br><span class="line">        group = round(group/step)</span><br><span class="line">    <span class="keyword">return</span> lists</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    arr =[]</span><br><span class="line">    <span class="keyword">while</span>(len(arr)&lt;<span class="number">100</span>):</span><br><span class="line">        x=random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> arr:</span><br><span class="line">            arr.append(x)</span><br><span class="line">    shellsort(arr)</span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><div class="note info"><pre><code>增量gap的取法有各种方案。最初Shell提出gap=n/2,gap=gap/2,直到gap=1.但由直到最后一步，在奇数位置的元素才会与偶数位置的元素进行比较，这样使这个序列的效率将很低。后来Knuth提出取gap=gap/3+1。还有人提出都取为好，也有人提出各gap互质为好。应用不同的序列会使希尔排序算法的性能有很大差异，有些序列的效率会明显更高，例如：1，8，23，77,281，1073，4193，16577。</code></pre><p>对希尔排序的时间复杂度的分析很困难，在特定情况下可以准确地估算排序码的次数和元素移动次数，但想要弄清排序码比较次数和元素移动次数与增量选择之间的依赖关系，并给出完整的数学分析，还没有人能够做到。<br>由于即使对于规模较大的序列（n&lt;=1000)，希尔排序都具有很高的效率。并且希尔排序算法的代码简单，容易执行，所以很多排序应用程序都选用了希尔排序算法。希尔排序是一种不稳定的排序算法。</p></div><div class="note success"><p><strong><font color="#5cb85c">继续加油!</font></strong></p><p>以上就是本次给大家分享的希尔排序的几种实现,如果有什么不足之处欢迎大家指出，留言。如果有什么写的不好的地方欢迎大家补充，希望得到大家的支持,,下面我会持续更新其他的排序算法，敬请期待!<br>(博客在今天开通了评论功能，欢迎大家一起来讨论交流啊!)</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
          <category> Java </category>
          
          <category> Python </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> 希尔排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo-abbrlink插件生成唯一文章链接</title>
      <link href="/posts/69978469.html"/>
      <url>/posts/69978469.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>Hexo在生成博客文章链接时，默认是按照年、月、日、标题格式来生成的，可以在站点配置文件中指定new_post_name的值。默认是:year/:month/:day/:title这样的格式。如果你的标题是中文的话，你的URL链接就会包含中文，生成的链接如下图：</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/12/16/QhIywV.png" alt="QhIywV.png"><br>复制后的url路径就是把中文变成了一大堆字符串编码：<br><a href="http://xjh199923.top/2019/12/15/Mac%E5%AE%89%E8%A3%85Qt%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">http://xjh199923.top/2019/12/15/Mac%E5%AE%89%E8%A3%85Qt%E6%95%99%E7%A8%8B/</a><br>如果你在其它地方用了你自己这篇文章的url链接，偶然你又修改了该文章的标题，那这个url链接岂不是失效了。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用hexo-abbrlink插件，A Hexo plugin to generate static post link based on post titles,来解决这个问题。<br>参考github官方：<br><a href="https://github.com/Rozbo/hexo-abbrlink" class="LinkCard" target="_blank" rel="noopener">hexo-abbrlink</a><br>按照此教程配置完之后如下：<br><img src="https://s2.ax1x.com/2019/12/16/Q4J7tg.png" alt="Q4J7tg.png"></p><h3 id="How-to-install"><a href="#How-to-install" class="headerlink" title="How to install"></a>How to install</h3><p>Add plugin to Hexo:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></div><div class="note danger"><p>执行此命令可能会不成功，提示你缺少相应的依赖，比如babel-eslint、mini-css-extract-plugin、webpack-cli…<br>使用npm命令安装即可，比如npm install <a href="mailto:eslint@4.x" target="_blank" rel="noopener">eslint@4.x</a> babel-eslint@8 –save-dev</p></div><p>Modify permalink in config.yml file:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/abbrlink.html</span>  <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br></pre></td></tr></table></figure></div><p>There are two settings:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">alg</span> <span class="bullet">--</span> <span class="string">Algorithm</span> <span class="string">(currently</span> <span class="string">support</span> <span class="string">crc16</span> <span class="string">and</span> <span class="string">crc32,</span> <span class="string">which</span> <span class="string">crc16</span> <span class="string">is</span> <span class="string">default)</span></span><br><span class="line"><span class="string">rep</span> <span class="bullet">--</span> <span class="string">Represent</span> <span class="string">(the</span> <span class="string">generated</span> <span class="string">link</span> <span class="string">could</span> <span class="string">be</span> <span class="string">presented</span> <span class="string">in</span> <span class="string">hex</span> <span class="string">or</span> <span class="string">dec</span> <span class="string">value)</span></span><br></pre></td></tr></table></figure></div><p>配置完成后如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line"><span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure></div><p>官方Sample<br>The generated link will look like the following:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/66c8.html</span></span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/65535.html</span></span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/8ddf18fb.html</span></span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/1690090958.html</span></span><br></pre></td></tr></table></figure></div><div class="note success"><p>生成完后,原文章md文件的Front-matter 内会增加abbrlink 字段,值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址,换句话说,就是本篇文章有了自己的专属链接。有了专属链接，找百度收录也就简单的多了，冲鸭！</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> abbrlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/posts/21238.html"/>
      <url>/posts/21238.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>排序算法之冒泡排序,冒泡排序，冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><a id="more"></a><div class="note info"><p>==算法描述:==<br>起泡排序的基本方法是：设待排序元素序列中的元素个数为n，首先比较第n-2个元素和第n-1个元素，如果发生逆序，即前一个大于后一个)，则将这两个元素交换；然后对第n-3个和第n-2个元素（可能是刚交换过来的）做同样处理；重复此过程直到处理完第0个和第1个元素。我们称它为一趟起泡，结果将最小的元素交换到待排序元素序列的第一个位置，其他元素也都向排序的最终位置移动。当然在个别情形下，元素有可能在排序中途向相反的方向移动，但元素移动的总趋势是向最终位置移动。正因为每一趟起泡就把一个排序码小的元素前移到它最后应在的位置，所以叫做起泡排序。这样最多做n一1趟起泡就能把所有元素排好序。</p><p>算法过程：</p><p>原始序列：3、44、38、5、47、15、36、 26、27、2、46、4、19、50、48</p><p>我们需要 拿第一个和第二个对比 如果第一个比第二个大那么就换位置，如果小就不换，接下来拿第二个和第三个…..这样依次下去比到最后 我们把这些数中最大的一个放在了右边， 然后再重复以上的方式下去就这些数只第二个大的放在了倒数第二位，依次下去..</p><p>1、比较相邻的元素。如果第一个比第二个大（小），就交换他们两个。</p><p>2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大（小）的数。</p><p>3、针对所有的元素重复以上的步骤，除了最后已经选出的元素（有序）。</p><p>4、持续每次对越来越少的元素（无序元素）重复上面的步骤，直到没有任何一对数字需要比较，则序列最终有序。</p><p>结果：{2、3、4、5、19、26、27、36、38、44、46、47、48、50}</p><p>冒泡排序个人认为是最简单的一个排序，也挺容易记住的，过程中会发生大量的交换，就没有像选择排序那样写步骤，如果大家还没有理解这个过程的话，小编依旧放上一个动图，让大家更深入的理解这个过程：</p><p><img src="https://img-blog.csdnimg.cn/20191113090100467.gif" alt="在这里插入图片描述"></p></div><h2 id="冒泡排序的C-Java-Python实现"><a href="#冒泡排序的C-Java-Python实现" class="headerlink" title="冒泡排序的C++,Java,Python实现"></a>冒泡排序的C++,Java,Python实现</h2><p><strong>因为小编也是java,python的初学者，写的不好的地方请大家见谅，后面的各大算法都会加入一个随机数的产生，基本上的实现大致相同，除了排序算法会变之外</strong></p><h3 id="冒泡排序C-实现代码："><a href="#冒泡排序C-实现代码：" class="headerlink" title="冒泡排序C++实现代码："></a>冒泡排序C++实现代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NUM=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];<span class="comment">//定义一个产生数组储存100个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExchangeSort</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; randsample=get_random(<span class="number">100</span>,MAX_NUM);<span class="comment">//产生100个0-MAZX_NUM的随机数,每次产生的随机数不一样</span></span><br><span class="line"><span class="keyword">int</span> size=randsample.size();</span><br><span class="line"><span class="comment">//输出最开始时未排序时的顺序:</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"随机数的顺序："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;randsample[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">clock_t</span> start,finish;<span class="comment">//定义一个测量一段程序运行时间的前后值</span></span><br><span class="line"><span class="keyword">double</span> totaltime;<span class="comment">//总的运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试冒泡排序</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"执行冒泡排序后:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;randsample.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">data[i]=randsample[i];</span><br><span class="line">&#125;</span><br><span class="line">start=clock();</span><br><span class="line">ExchangeSort(size);</span><br><span class="line">finish=clock();</span><br><span class="line">output(size);</span><br><span class="line">totaltime=(<span class="keyword">double</span>)(finish-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"运行时间："</span>&lt;&lt;totaltime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生随机数的函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_random(<span class="keyword">int</span> n, <span class="keyword">int</span> N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(N);<span class="comment">//N代表初始状态分配的空间大小</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out_vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line">vec[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> rand_value=rand()%N;</span><br><span class="line">out_vec.push_back(vec[rand_value]);</span><br><span class="line">vec[rand_value]=vec[N<span class="number">-1</span>];<span class="comment">//将数组vec的元素</span></span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out_vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序，又称选择排序,加入一个exchange来改进排序时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExchangeSort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count1=<span class="number">0</span>;<span class="comment">//count,count1分别用来计算比较次数和移动次数</span></span><br><span class="line"><span class="keyword">int</span> tem;</span><br><span class="line"><span class="keyword">bool</span> exchange;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">exchange=<span class="literal">false</span>;<span class="comment">//检查前假设没有发生排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i]&gt;data[j])&#123;</span><br><span class="line">count++;</span><br><span class="line">Swap(i, j);</span><br><span class="line">count1++;</span><br><span class="line">exchange=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(exchange==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"比较次数: "</span>&lt;&lt;count&lt;&lt;<span class="string">"  移动次数:  "</span>&lt;&lt;count1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tem;</span><br><span class="line">tem = data[j];</span><br><span class="line">data[j]= data[i];</span><br><span class="line">data[i] = tem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>测试结果展示：</p><p><a href="https://imgchr.com/i/M8xU9U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/13/M8xU9U.md.png" alt="M8xU9U.md.png"></a></p><h3 id="排序Java代码实现"><a href="#排序Java代码实现" class="headerlink" title="排序Java代码实现"></a>排序Java代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object []arr = getRandomNumList(<span class="number">100</span>,<span class="number">0</span>,<span class="number">10000</span>).toArray();</span><br><span class="line">    <span class="keyword">int</span>[] ins = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>] ;</span><br><span class="line">    System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      String s=arr[i].toString();</span><br><span class="line">      ins[i]= Integer.parseInt( s );</span><br><span class="line">      System.out.println(ins[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">    <span class="keyword">int</span>[] ins2 = exchangesort(ins);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      System.out.println(ins2[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] exchangesort(<span class="keyword">int</span>[] data)&#123;</span><br><span class="line"><span class="keyword">int</span> exchange;</span><br><span class="line"><span class="keyword">int</span> n = data.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">exchange=<span class="number">0</span>;<span class="comment">//检查前假设没有发生排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i]&gt;data[j])&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp = data[j];</span><br><span class="line">data[j]= data[i];</span><br><span class="line">data[i] = temp;</span><br><span class="line">exchange=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(exchange==<span class="number">0</span>)</span><br><span class="line">&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//定义生成随机数并且装入集合容器的方法</span></span><br><span class="line">    <span class="comment">//方法的形参列表分别为：生成随机数的个数、生成随机数的值的范围最小值为start(包含start)、值得范围最大值为end(不包含end)  可取值范围可表示为[start,end)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getRandomNumList</span><span class="params">(<span class="keyword">int</span> nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合容器对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//循环将得到的随机数进行判断，如果随机数不存在于集合中，则将随机数放入集合中，如果存在，则将随机数丢弃不做操作，进行下一次循环，直到集合长度等于nums</span></span><br><span class="line">        <span class="keyword">while</span>(list.size() != nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(end-start) + start;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(num))&#123;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="冒泡排序Python代码实现"><a href="#冒泡排序Python代码实现" class="headerlink" title="冒泡排序Python代码实现"></a>冒泡排序Python代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ExchangeSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>):</span><br><span class="line">        ex_flag = <span class="literal">False</span>  <span class="comment"># 改进后的冒泡，设置一个交换标志位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums) - i - <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:</span><br><span class="line">                nums[j], nums[j + <span class="number">1</span>] = nums[j + <span class="number">1</span>], nums[j]</span><br><span class="line">                ex_flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ex_flag:</span><br><span class="line">            <span class="keyword">return</span> nums  <span class="comment"># 这里代表计算机偷懒成功 (〃'▽'〃)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums  <span class="comment"># ExchangeSort这里代表计算机没有偷懒成功 o(╥﹏╥)o</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    arr =[]</span><br><span class="line">    <span class="keyword">while</span>(len(arr)&lt;<span class="number">100</span>):</span><br><span class="line">        x=random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> arr:</span><br><span class="line">            arr.append(x)</span><br><span class="line">    ExchangeSort(arr)</span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><div class="note info"><p>起泡排序中，第i趟起泡中需要执行n一i次比较和交换操作。因此，从1到n一1，执行行的比较操作的次数为：</p><p><strong><font color="#5cb85c">(n-1)+(n-2)+…+2+1=n*(n-1)/2</font></strong><br>从排序的执行过程中可以看到基本的起泡排序的数据比较次数与输人序列中各待排序元素的初始排列无关，但数据的交换次数与各待排序元素的初始排列有关，它与逆序的发生有关，最好情况下可能一次也不交换，最差情况下每一次比较都需要交换。</p><p>为此，在算法中可增加一个标志exchange,用以标识本趟起泡结果是否发生了逆序和交换。如果没有发生交换则exchange=false，表示全部元素已经排好序，因而可以停止处理，结束算法；如果xchange=true,表示本趟有元素发生交换，还需执行下一趟排序。</p><p>在做了这样的改进之后，如果元素序列已经有序，那么只需要一趟起泡，算法就顺利结束了。因此，对于改进的起泡算法，最好的情况下需要n次比较和0次交换操作，而在一般情况最差情况下，排序算法大约需要$n^2$/2次比较和交换操作.</p></div><div class="note success"><p><strong><font color="#5cb85c">继续加油!</font></strong></p><p>以上就是本次给大家分享的冒泡排序的几种语言的实现,如果有什么不足之处欢迎大家指出，留言，互相学习，共同进步。希望得到大家的支持,你的支持就是我前进的动力,接下来我会持续更新其他的排序算法，敬请期待！</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
          <category> Java </category>
          
          <category> Python </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装Qt教程</title>
      <link href="/posts/59037.html"/>
      <url>/posts/59037.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><p>史上最详细mac安装Qt教程，小白看过来！这是一篇非常适合Qt入门小白的的安装Qt教程，因为这学期我们小组的一个关于高速救援的项目要用到Qt与web进行交互式展现相关的图像，由于没有MSVC这个插件，所以我只好选择重装Qt，这次没有第一次装那么困难，毕竟经历过一次，这次我以这篇博客记录下来，分享给大家！</p><a id="more"></a><h5 id="首先，进入QT官网"><a href="#首先，进入QT官网" class="headerlink" title="首先，进入QT官网"></a>首先，进入<a href="http://download.qt.io/archive/qt/" target="_blank" rel="noopener">QT官网</a></h5><h5 id="选择你需要的版本，我选择了5-13，因为5-14才更新两天，不喜欢用最新的，当这个小白鼠。"><a href="#选择你需要的版本，我选择了5-13，因为5-14才更新两天，不喜欢用最新的，当这个小白鼠。" class="headerlink" title="选择你需要的版本，我选择了5.13，因为5.14才更新两天，不喜欢用最新的，当这个小白鼠。"></a>选择你需要的版本，我选择了5.13，因为5.14才更新两天，不喜欢用最新的，当这个小白鼠。</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf5gp9.md.png" alt="在这里插入图片描述"></p><h5 id="选择你需要的安装，当然mac是选择小编勾画出来的部分"><a href="#选择你需要的安装，当然mac是选择小编勾画出来的部分" class="headerlink" title="选择你需要的安装，当然mac是选择小编勾画出来的部分"></a>选择你需要的安装，当然mac是选择小编勾画出来的部分</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf52lR.md.png" alt="在这里插入图片描述"></p><h5 id="接下来又是漫长的等待下载环节，没想到今天学校的网速这么给力"><a href="#接下来又是漫长的等待下载环节，没想到今天学校的网速这么给力" class="headerlink" title="接下来又是漫长的等待下载环节，没想到今天学校的网速这么给力"></a>接下来又是漫长的等待下载环节，没想到今天学校的网速这么给力</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf56fJ.png" alt="Qf56fJ.png"></p><h5 id="下载好之后双击安装"><a href="#下载好之后双击安装" class="headerlink" title="下载好之后双击安装"></a>下载好之后双击安装</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf5yY4.png" alt="Qf5yY4.png"></p><h5 id="我也不知道为什么这次安装验证了这么久，可能是还是有2个多G吧，我等了超久。"><a href="#我也不知道为什么这次安装验证了这么久，可能是还是有2个多G吧，我等了超久。" class="headerlink" title="我也不知道为什么这次安装验证了这么久，可能是还是有2个多G吧，我等了超久。"></a>我也不知道为什么这次安装验证了这么久，可能是还是有2个多G吧，我等了超久。</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf5R61.png" alt="Qf5R61.png"></p><h5 id="验证成功之后就会出现下面这个界面，毫不犹豫的next"><a href="#验证成功之后就会出现下面这个界面，毫不犹豫的next" class="headerlink" title="验证成功之后就会出现下面这个界面，毫不犹豫的next"></a>验证成功之后就会出现下面这个界面，毫不犹豫的next</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf5WOx.png" alt="Qf5WOx.png"></p><h5 id="接下来你需要选择你的安装地址，等会儿会下载需要的插件的安装位置，选择好之后就继续"><a href="#接下来你需要选择你的安装地址，等会儿会下载需要的插件的安装位置，选择好之后就继续" class="headerlink" title="接下来你需要选择你的安装地址，等会儿会下载需要的插件的安装位置，选择好之后就继续"></a>接下来你需要选择你的安装地址，等会儿会下载需要的插件的安装位置，选择好之后就继续</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf5hm6.png" alt="Qf5hm6.png"></p><h5 id="看到下面这个界面就不用我说了吧，当然是I-have-啊"><a href="#看到下面这个界面就不用我说了吧，当然是I-have-啊" class="headerlink" title="看到下面这个界面就不用我说了吧，当然是I have 啊"></a>看到下面这个界面就不用我说了吧，当然是I have 啊</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qf540K.png" alt="Qf540K.png"></p><h5 id="下面这一步你需要选择你需要的插件，如果你电脑吃的消全选也没啥问题，本来想要MSVC-没想到没有，我太气了！只能说利用这次水一篇教程的博文吧哈哈哈，选择好之后点击继续，接下来需要等待一段时间，毕竟要下载几个G的插件嘛，耐心等待吧"><a href="#下面这一步你需要选择你需要的插件，如果你电脑吃的消全选也没啥问题，本来想要MSVC-没想到没有，我太气了！只能说利用这次水一篇教程的博文吧哈哈哈，选择好之后点击继续，接下来需要等待一段时间，毕竟要下载几个G的插件嘛，耐心等待吧" class="headerlink" title="下面这一步你需要选择你需要的插件，如果你电脑吃的消全选也没啥问题，本来想要MSVC,没想到没有，我太气了！只能说利用这次水一篇教程的博文吧哈哈哈，选择好之后点击继续，接下来需要等待一段时间，毕竟要下载几个G的插件嘛，耐心等待吧"></a>下面这一步你需要选择你需要的插件，如果你电脑吃的消全选也没啥问题，本来想要MSVC,没想到没有，我太气了！只能说利用这次水一篇教程的博文吧哈哈哈，选择好之后点击继续，接下来需要等待一段时间，毕竟要下载几个G的插件嘛，耐心等待吧</h5><p><img src="https://s2.ax1x.com/2019/12/15/QfTx76.png" alt="QfTx76.png"></p><h5 id="终于等到了安装成功！"><a href="#终于等到了安装成功！" class="headerlink" title="终于等到了安装成功！"></a>终于等到了安装成功！</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFTUS.png" alt="QhFTUS.png"><br><img src="https://s2.ax1x.com/2019/12/15/QhF5Hf.png" alt="QhF5Hf.png"></p><h5 id="接下来创建一个project看看吧"><a href="#接下来创建一个project看看吧" class="headerlink" title="接下来创建一个project看看吧"></a>接下来创建一个project看看吧</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFbCQ.png" alt="QhFbCQ.png"></p><h5 id="新建项目new-project"><a href="#新建项目new-project" class="headerlink" title="新建项目new project"></a>新建项目new project</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFoE8.png" alt="QhFoE8.png"></p><h5 id="就拿一个widgets来测试吧"><a href="#就拿一个widgets来测试吧" class="headerlink" title="就拿一个widgets来测试吧"></a>就拿一个widgets来测试吧</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhF4DP.png" alt="QhF4DP.png"></p><h5 id="在此你要设置你的项目路径，与你的Qt安装路径是不一样的，这个路径是你的项目产生的文件所存取的路径-然后点击继续"><a href="#在此你要设置你的项目路径，与你的Qt安装路径是不一样的，这个路径是你的项目产生的文件所存取的路径-然后点击继续" class="headerlink" title="在此你要设置你的项目路径，与你的Qt安装路径是不一样的，这个路径是你的项目产生的文件所存取的路径,然后点击继续"></a>在此你要设置你的项目路径，与你的Qt安装路径是不一样的，这个路径是你的项目产生的文件所存取的路径,然后点击继续</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFq3j.png" alt="QhFq3j.png"></p><h5 id="采用qmake来进行编译"><a href="#采用qmake来进行编译" class="headerlink" title="采用qmake来进行编译"></a>采用qmake来进行编译</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFOvn.png" alt="QhFOvn.png"></p><h5 id="创建之后会产生以下相关的窗体设计文件"><a href="#创建之后会产生以下相关的窗体设计文件" class="headerlink" title="创建之后会产生以下相关的窗体设计文件"></a>创建之后会产生以下相关的窗体设计文件</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFjuq.png" alt="QhFjuq.png"></p><h5 id="选择一个kits"><a href="#选择一个kits" class="headerlink" title="选择一个kits"></a>选择一个kits</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFvD0.png" alt="QhFvD0.png"></p><h5 id="最后一完成之后就OK了"><a href="#最后一完成之后就OK了" class="headerlink" title="最后一完成之后就OK了"></a>最后一完成之后就OK了</h5><p><img src="https://s2.ax1x.com/2019/12/15/QhFxbV.png" alt="QhFxbV.png"></p><h5 id="不需要添加任何代码，直接编译运行，出现一个窗口说明就成功了"><a href="#不需要添加任何代码，直接编译运行，出现一个窗口说明就成功了" class="headerlink" title="不需要添加任何代码，直接编译运行，出现一个窗口说明就成功了"></a>不需要添加任何代码，直接编译运行，出现一个窗口说明就成功了</h5><p><img src="https://s2.ax1x.com/2019/12/15/Qhk95F.png" alt="Qhk95F.png"></p><div class="note success"><p>继续加油!<br>到这里基本上教程就算得上是结束了，如果有写的不好的地方，欢迎评论指出来，我做相应的修正。一篇小小的教程可能需要花很多的时间去堆积，如果觉得还不错的就点上一个赞吧，你的支持就是我前进的动力，我们一起学习，共同进步！</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的相关操作(队列实现杨辉三角的打印)</title>
      <link href="/posts/22281.html"/>
      <url>/posts/22281.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><h2 id="队列的相关操作-队列实现杨辉三角的打印"><a href="#队列的相关操作-队列实现杨辉三角的打印" class="headerlink" title="队列的相关操作(队列实现杨辉三角的打印)"></a>队列的相关操作(队列实现杨辉三角的打印)</h2><p>###<br>1.实现队列的一种存储结构<br>2.实现队列的相关操作<br>3.利用队列的操作特点，借助进队与出队操作完成打印二项式系数的任务（杨辉三角的打印）</p><p><img src="https://img-blog.csdnimg.cn/20191011121857759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="杨辉三角打印图"></p><a id="more"></a><h3 id="考虑到实现多种数据类型，采用了C-的模板方式编写，并利用了STL库函数的vector容器类来储存数据-该循环队列主要实现了以下函数："><a href="#考虑到实现多种数据类型，采用了C-的模板方式编写，并利用了STL库函数的vector容器类来储存数据-该循环队列主要实现了以下函数：" class="headerlink" title="考虑到实现多种数据类型，采用了C++的模板方式编写，并利用了STL库函数的vector容器类来储存数据,该循环队列主要实现了以下函数："></a>考虑到实现多种数据类型，采用了C++的模板方式编写，并利用了STL库函数的vector容器类来储存数据,该循环队列主要实现了以下函数：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; data;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  MyCircularQueue() &#123;</span><br><span class="line">    data.resize(k);</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    tail = <span class="number">-1</span>;</span><br><span class="line">    size = k;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">setsize</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span></span>;<span class="comment">//进队</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">(T&amp; x)</span></span>;<span class="comment">//出队</span></span><br><span class="line">  <span class="function">T <span class="title">getFront</span><span class="params">()</span> </span>;<span class="comment">//取队列头部元素</span></span><br><span class="line">  <span class="function">T <span class="title">getRear</span><span class="params">()</span></span>;<span class="comment">//取队列位尾部元素</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//判断是否为满</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="主要函数的相关实现"><a href="#主要函数的相关实现" class="headerlink" title="主要函数的相关实现"></a>主要函数的相关实现</h3><h4 id="队列元素进队"><a href="#队列元素进队" class="headerlink" title="队列元素进队"></a>队列元素进队</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">MyCircularQueue</span>&lt;T&gt;:</span>:enQueue(<span class="keyword">const</span> T&amp; value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">      head = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tail = (tail + <span class="number">1</span>) % size;</span><br><span class="line">    data[tail] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="队列元素出队"><a href="#队列元素出队" class="headerlink" title="队列元素出队"></a>队列元素出队</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">MyCircularQueue</span>&lt;T&gt;:</span>:deQueue(T&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">  x=data[head];</span><br><span class="line">  <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    tail = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  head = (head + <span class="number">1</span>) % size;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="取队列头部元素"><a href="#取队列头部元素" class="headerlink" title="取队列头部元素"></a>取队列头部元素</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">MyCircularQueue</span>&lt;T&gt;:</span>:getFront() </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="取队列位尾部元素"><a href="#取队列位尾部元素" class="headerlink" title="取队列位尾部元素"></a>取队列位尾部元素</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">MyCircularQueue</span>&lt;T&gt;:</span>:getRear() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data[tail];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="测试函数实现杨辉三角的打印"><a href="#测试函数实现杨辉三角的打印" class="headerlink" title="测试函数实现杨辉三角的打印"></a>测试函数实现杨辉三角的打印</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">MyCircularQueue&lt;<span class="keyword">int</span>&gt; queve;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>,x;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j,s=<span class="number">0</span>,k=<span class="number">0</span>,t=<span class="number">0</span>,u;</span><br><span class="line">    queve.enQueue(i);queve.enQueue(i);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">1</span>; j&lt;=n - i ; j++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      queve.enQueue(k);</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i+<span class="number">2</span>;j++)</span><br><span class="line">      &#123;</span><br><span class="line">        queve.deQueue(t);</span><br><span class="line">        u=s+t;</span><br><span class="line">        queve.enQueue(u);</span><br><span class="line">        s=t;</span><br><span class="line">        <span class="keyword">if</span>(j!=i+<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">6</span>)&lt;&lt;s;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><h3 id="希望和大家一起进步，一起学习，有什么可以改进的地方希望大家评论区指出来，我加以改正，继续加油。也可以通过我的QQ联系我哟。"><a href="#希望和大家一起进步，一起学习，有什么可以改进的地方希望大家评论区指出来，我加以改正，继续加油。也可以通过我的QQ联系我哟。" class="headerlink" title="希望和大家一起进步，一起学习，有什么可以改进的地方希望大家评论区指出来，我加以改正，继续加油。也可以通过我的QQ联系我哟。"></a>希望和大家一起进步，一起学习，有什么可以改进的地方希望大家评论区指出来，我加以改正，继续加油。也可以通过我的QQ联系我哟。</h3><p><a href="https://download.csdn.net/download/qq_43336390/11848049" target="_blank" rel="noopener">完整代码下载地址</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 杨辉三角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的相关实现</title>
      <link href="/posts/14311.html"/>
      <url>/posts/14311.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Dec 23 2019 10:19:25 GMT+0800 (中国标准时间) --><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><strong><em>二叉搜索树实现了以下功能<br>1.计算二叉搜索树的大小<br>2.前中后递归遍历二叉搜索树<br>3.前中后非递归遍历二叉搜索树<br>4.层序遍历二叉搜索树<br>5.二叉搜索树叶子个数<br>6.二叉搜索树的深度<br>7.二叉搜索树的结点的度<br>8.二叉搜索树的双亲以及左右子女的查找<br>9.查找某一节点<br>10.插入新的结点<br>11.删除某一节点<br>12.判断是否为平衡树</em></strong><br><img src="https://img-blog.csdnimg.cn/20191030231545417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzM2Mzkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="定义一个结点结构体"><a href="#定义一个结点结构体" class="headerlink" title="定义一个结点结构体"></a>定义一个结点结构体</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义二叉搜索树的节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  BinaryTreeNode &lt;T&gt;* _left;</span><br><span class="line">  BinaryTreeNode &lt;T&gt;* _right;</span><br><span class="line">  T _data;</span><br><span class="line">  BinaryTreeNode(T &amp;data)</span><br><span class="line">    :_left(<span class="literal">NULL</span>)</span><br><span class="line">    ,_right(<span class="literal">NULL</span>)</span><br><span class="line">    ,_data(data)</span><br><span class="line">  &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="封装的相关函数"><a href="#封装的相关函数" class="headerlink" title="封装的相关函数"></a>封装的相关函数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* _root;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//无参的构造函数</span></span><br><span class="line">    BinarySearchTree()</span><br><span class="line">    :_root(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    BinarySearchTree(<span class="built_in">vector</span>&lt;T&gt; v)</span><br><span class="line">    &#123;</span><br><span class="line">      _root=<span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">      &#123;</span><br><span class="line">        insert(_root,v[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//复制构造函数</span></span><br><span class="line">    BinarySearchTree(<span class="keyword">const</span> BinarySearchTree&lt;T&gt; &amp;s)</span><br><span class="line">    &#123;_root=CopyBintTree(s.GetRoot());&#125;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* GetRoot()</span><br><span class="line">    &#123;<span class="keyword">return</span>  <span class="keyword">this</span>-&gt;_root;&#125;</span><br><span class="line">    <span class="comment">//递归先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrevOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//递归中序遍历二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//递归后续遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//非递归后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder_NonR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//层序遍历二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Leve1Order</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//二叉搜索树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//递归求二叉搜索树叶子节点的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LeafSize</span><span class="params">(BinaryTreeNode&lt;T&gt;* root)</span></span>;</span><br><span class="line">    <span class="comment">//求节点的度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DegreeofNode</span><span class="params">(T tmp)</span></span>;</span><br><span class="line">    <span class="comment">//求节点的层次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(BinaryTreeNode&lt;T&gt;* root,<span class="keyword">int</span> val,<span class="keyword">int</span> &amp;ans,<span class="keyword">int</span> lev)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLevelofNode</span><span class="params">(T tmp)</span></span>;</span><br><span class="line">    <span class="comment">//二叉搜索树的复制</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* CopyBintTree(BinaryTreeNode&lt;T&gt;* originNode);</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的双亲</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentofNode</span><span class="params">(BinaryTreeNode&lt;T&gt;* r,T data)</span></span>;</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的左子女</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* LeftChildofNode(T tmp);</span><br><span class="line">    <span class="comment">//寻找二叉搜索树某一节点的右子女</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* RightChildofNode(T tmp);</span><br><span class="line">    <span class="comment">//查找某一个结点</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt;* FindNode(T tmp,BinaryTreeNode&lt;T&gt;* &amp;root);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(BinaryTreeNode&lt;T&gt;* &amp;root, T val)</span></span>;<span class="comment">//二叉搜索树的插入一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(T val)</span></span>;<span class="comment">//删除某一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(T x)</span></span>;<span class="comment">//二叉搜索树的搜索</span></span><br><span class="line">    BinaryTreeNode&lt;T&gt; * Remove(BinaryTreeNode&lt;T&gt; * &amp;root,T val);<span class="comment">//二叉搜索树的删除结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(BinaryTreeNode&lt;T&gt; * &amp;root)</span></span>;<span class="comment">//判断是否为平衡二叉树</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="各个函数的实现"><a href="#各个函数的实现" class="headerlink" title="各个函数的实现"></a>各个函数的实现</h3><h4 id="前中后序遍历的递归实现"><a href="#前中后序遍历的递归实现" class="headerlink" title="前中后序遍历的递归实现"></a>前中后序遍历的递归实现</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PrevOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;root-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  PrevOrder(root-&gt;_left );</span><br><span class="line">  PrevOrder(root-&gt;_right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:InOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  InOrder(root-&gt;_left );</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;root-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  InOrder(root-&gt;_right );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PostOrder(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    PostOrder(root-&gt;_left);</span><br><span class="line">    PostOrder(root-&gt;_right);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;root-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="前中后序遍历的非递归实现"><a href="#前中后序遍历的非递归实现" class="headerlink" title="前中后序遍历的非递归实现"></a>前中后序遍历的非递归实现</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PrevOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  <span class="keyword">while</span>(cur||!s.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(cur)</span><br><span class="line">    &#123;<span class="comment">//先将左子树遍历输出后压栈</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cur-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    s.push(cur);</span><br><span class="line">    cur=cur-&gt;_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//当左子树为空时开始访问右子树</span></span><br><span class="line">    cur=s.top ();</span><br><span class="line">    s.pop();</span><br><span class="line">    cur=cur-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:InOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">    <span class="keyword">while</span>(cur||!s.empty())<span class="comment">//cur非空或者栈非空</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(cur)</span><br><span class="line">      &#123;</span><br><span class="line">        s.push(cur);<span class="comment">//根节点进栈遍历左子树</span></span><br><span class="line">        cur=cur-&gt;_left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt;* top=s.top();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;top-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">        cur=top-&gt;_right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:PostOrder_NonR()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;BinaryTreeNode&lt;T&gt;*&gt; s;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* cur=_root;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* prev=<span class="literal">NULL</span>;<span class="comment">//设置标志域</span></span><br><span class="line">  s.push(_root);</span><br><span class="line">  <span class="keyword">while</span>(!s.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    cur=s.top();</span><br><span class="line">    <span class="keyword">if</span>((cur-&gt;_left ==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right ==<span class="literal">NULL</span>)</span><br><span class="line">      ||(prev!=<span class="literal">NULL</span>&amp;&amp;(prev==cur-&gt;_left ||prev ==cur-&gt;_right )))</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;cur-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">      prev=cur;</span><br><span class="line">      s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">      s.push(cur-&gt;_right);</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)</span><br><span class="line">      s.push(cur-&gt;_left); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="层序遍历二叉树"><a href="#层序遍历二叉树" class="headerlink" title="层序遍历二叉树"></a>层序遍历二叉树</h4><p>按层次顺序访问二叉树的处理需要利用一个队列。<br>在访问二又树的某一层结点时，把下一层结点指针预先<br>记忆在队列中，利用队列安排逐层访问的次序。因此，每<br>当访问一个结点时，将它的子女依次加到队列的队尾，然<br>后再访问已在队列队头的结点。这样可以实现二叉树结<br>点的按层访问</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Leve1Order()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* front=q.front();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;front-&gt;_data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span>(front-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(front-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(front-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的大小"><a href="#求树的大小" class="headerlink" title="求树的大小"></a>求树的大小</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Size(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> Ssize=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ++Ssize;</span><br><span class="line">  Size(root-&gt;_left);</span><br><span class="line">  Size(root-&gt;_right);</span><br><span class="line">  <span class="keyword">return</span> Ssize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的深度"><a href="#求树的深度" class="headerlink" title="求树的深度"></a>求树的深度</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Depth(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> left=Depth(root-&gt;_left )+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">size_t</span> right=Depth(root-&gt;_right)+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (left&gt;right)?left:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的叶子个数"><a href="#求树的叶子个数" class="headerlink" title="求树的叶子个数"></a>求树的叶子个数</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:LeafSize(BinaryTreeNode&lt;T&gt;* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(root-&gt;_left  ==<span class="literal">NULL</span>&amp;&amp;root-&gt;_right ==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> LeafSize(root-&gt;_left )+LeafSize(root-&gt;_right );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求树的各个结点的度"><a href="#求树的各个结点的度" class="headerlink" title="求树的各个结点的度"></a>求树的各个结点的度</h4><p>利用二叉树的层次遍历方法来统计各个节点的度</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:DegreeofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">    <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      q.push(_root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">      BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_data==tmp)&#123;</span><br><span class="line">        <span class="keyword">if</span>((cur-&gt;_left==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right!=<span class="literal">NULL</span>)||(cur-&gt;_left!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right==<span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_left==<span class="literal">NULL</span>&amp;&amp;cur-&gt;_right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q.push(cur-&gt;_left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">      q.push(cur-&gt;_right);</span><br><span class="line">      q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="复制搜索二叉树"><a href="#复制搜索二叉树" class="headerlink" title="复制搜索二叉树"></a>复制搜索二叉树</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:CopyBintTree(BinaryTreeNode&lt;T&gt;* originNode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(originNode==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  BinaryTreeNode&lt;T&gt;* temp=<span class="keyword">new</span> BinaryTreeNode&lt;T&gt;;</span><br><span class="line">  temp-&gt;_data=originNode-&gt;_data;</span><br><span class="line">  temp-&gt;_left=CopyBintTree(originNode-&gt;_left);</span><br><span class="line">  temp-&gt;_right=CopyBintTree(originNode-&gt;_right);</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求某一结点的双亲及左右子女"><a href="#求某一结点的双亲及左右子女" class="headerlink" title="求某一结点的双亲及左右子女"></a>求某一结点的双亲及左右子女</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:ParentofNode(BinaryTreeNode&lt;T&gt;* r,T data)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(r ==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(r-&gt;_left != <span class="literal">NULL</span>)<span class="comment">//当左孩子存在的时候才进行判断，否则程序出错</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;_left-&gt;_data == data)&#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"这个节点的双亲结点是:"</span>&lt;&lt;r-&gt;_data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(r-&gt;_right != <span class="literal">NULL</span>)<span class="comment">//如左子树所示</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;_right-&gt;_data == data)    </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"这个节点的双亲结点是:"</span>&lt;&lt;r-&gt;_data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ParentofNode(r-&gt;_left,data);</span><br><span class="line">  ParentofNode(r-&gt;_right,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>: LeftChildofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_data==tmp&amp;&amp;cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> cur-&gt;_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(cur-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(cur-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:RightChildofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;BinaryTreeNode&lt;T&gt;*&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(_root!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    q.push(_root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    BinaryTreeNode&lt;T&gt;* cur=q.front();</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_data==tmp&amp;&amp;cur-&gt;_right!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> cur-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      q.push(cur-&gt;_left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;_right!=<span class="literal">NULL</span>)</span><br><span class="line">    q.push(cur-&gt;_right);</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="求某一结点的层次"><a href="#求某一结点的层次" class="headerlink" title="求某一结点的层次"></a>求某一结点的层次</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:level(BinaryTreeNode&lt;T&gt;* root,<span class="keyword">int</span> val,<span class="keyword">int</span> &amp;ans,<span class="keyword">int</span> lev)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span>==root)</span><br><span class="line">    ans=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_data==val)</span><br><span class="line">    ans=lev;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    level(root-&gt;_left,val,ans,lev+<span class="number">1</span>);<span class="comment">//在左子树中查找</span></span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line">      level(root-&gt;_right,val,ans,lev+<span class="number">1</span>);<span class="comment">//在右子树中查找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:GetLevelofNode(T tmp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> res=<span class="number">-1</span>;</span><br><span class="line">  level(_root,tmp,res,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="查找搜索某一个结点"><a href="#查找搜索某一个结点" class="headerlink" title="查找搜索某一个结点"></a>查找搜索某一个结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span>  <span class="title">BinaryTreeNode</span>&lt;T&gt;* <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:FindNode(T tmp,BinaryTreeNode&lt;T&gt;* &amp;root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;root-&gt;_data)&#123;</span><br><span class="line">    <span class="keyword">return</span> FindNode(tmp,root-&gt;_left);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tmp&gt;root-&gt;_data)&#123;</span><br><span class="line">      <span class="keyword">return</span> FindNode(tmp,root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Search(T x)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;FindNode(x,_root)==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="插入一个新的结点"><a href="#插入一个新的结点" class="headerlink" title="插入一个新的结点"></a>插入一个新的结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:insert(BinaryTreeNode&lt;T&gt;* &amp;root, T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    root=<span class="keyword">new</span> BinaryTreeNode&lt;T&gt;(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(val&lt;root-&gt;_data)&#123;</span><br><span class="line">    insert(root-&gt;_left,val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;root-&gt;_data)&#123;</span><br><span class="line">      insert(root-&gt;_right,val);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">BinaryTreeNode</span>&lt;T&gt; * <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Remove(BinaryTreeNode&lt;T&gt; * &amp;root,T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;_data &gt; val)</span><br><span class="line">      root-&gt;_left = Remove(root-&gt;_left, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_data &lt; val)</span><br><span class="line">      root-&gt;_right = Remove(root-&gt;_right, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (root-&gt;_left == <span class="literal">NULL</span>&amp;&amp;root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_left == <span class="literal">NULL</span>)</span><br><span class="line">        root = root-&gt;_right;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        root = root-&gt;_left;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt; *minnode = root-&gt;_right;</span><br><span class="line">        <span class="keyword">while</span> (minnode-&gt;_left != <span class="literal">NULL</span>)</span><br><span class="line">          minnode = minnode-&gt;_left;</span><br><span class="line">        root-&gt;_data = minnode-&gt;_data;</span><br><span class="line">        root-&gt;_right = Remove(root-&gt;_right, minnode-&gt;_data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:Delete(T val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!Search(val))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  Remove(_root, val);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="是否为平衡树"><a href="#是否为平衡树" class="headerlink" title="是否为平衡树"></a>是否为平衡树</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">BinarySearchTree</span>&lt;T&gt;:</span>:isBalanced(BinaryTreeNode&lt;T&gt; * &amp;root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (!root-&gt;_left &amp;&amp; !root-&gt;_right)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(Size(root-&gt;_left) - Size(root-&gt;_right)) &gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> isBalanced(root-&gt;_left) &amp;&amp; isBalanced(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！"><a href="#每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！" class="headerlink" title="每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！"></a>每一次写博客都是学习过程的记录，有什么问题大家提出来！我们一起讨论，欢迎留言！</h5><p><a href="https://github.com/xjh199923/BinarySearchTree.git" target="_blank" rel="noopener">项目源代码传送门</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> 类模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
